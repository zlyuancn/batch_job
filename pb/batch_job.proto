syntax = 'proto3';
package batch_job; // 决定proto引用路径和rpc路由
option go_package = "github.com/zlyuancn/batch_job/pb"; // 用于对golang包管理的定位

import "google/api/annotations.proto";  // 添加导入
import "validate/validate.proto";

// 批量任务服务
service BatchJobService{
  // 业务注册
  rpc AdminRegistryBiz(AdminRegistryBizReq) returns (AdminRegistryBizRsp) {
    option (google.api.http) = {
      post: "/BatchJob/AdminRegistryBiz",
      body: "*",
    };
  }
  // 修改业务
  rpc AdminUpdateBiz(AdminUpdateBizReq) returns (AdminUpdateBizRsp){
    option (google.api.http) = {
      post: "/BatchJob/AdminUpdateBiz",
      body: "*",
    };
  }
  // 创建任务
  rpc AdminCreateJob(AdminCreateJobReq) returns (AdminCreateJobRsp) {
    option (google.api.http) = {
      post: "/BatchJob/AdminCreateJob",
      body: "*",
    };
  }
  // 修改任务
  rpc AdminUpdateJob(AdminUpdateJobReq) returns (AdminUpdateJobRsp) {
    option (google.api.http) = {
      post: "/BatchJob/AdminUpdateJob",
      body: "*",
    };
  }
  // 启动任务
  rpc AdminStartJob(AdminStartJobReq) returns (AdminStartJobRsp) {
    option (google.api.http) = {
      post: "/BatchJob/AdminStartJob",
      body: "*",
    };
  }
  // 停止任务
  rpc AdminStopJob(AdminStopJobReq) returns (AdminStopJobRsp) {
    option (google.api.http) = {
      post: "/BatchJob/AdminStopJob",
      body: "*",
    };
  }

  // 查询所有业务名
  rpc QueryAllBizName(QueryAllBizNameReq) returns (QueryAllBizNameRsp) {
    option (google.api.http) = {
      post: "/BatchJob/QueryAllBizName",
      body: "*",
    };
  }
  // 查询业务信息
  rpc QueryBizInfo(QueryBizInfoReq) returns (QueryBizInfoRsp) {
    option (google.api.http) = {
      post: "/BatchJob/QueryBizInfo",
      body: "*",
    };
  }
  // 查询业务列表
  rpc QueryBizList(QueryBizListReq) returns (QueryBizListRsp) {
    option (google.api.http) = {
      post: "/BatchJob/QueryBizList",
      body: "*",
    };
  }
  // 查询任务基本信息
  rpc QueryJobInfo(QueryJobInfoReq) returns (QueryJobInfoRsp) {
    option (google.api.http) = {
      post: "/BatchJob/QueryJobBaseInfo",
      body: "*",
    };
  }
  // 查询任务列表
  rpc QueryJobList(QueryJobListReq) returns (QueryJobListRsp) {
    option (google.api.http) = {
      post: "/BatchJob/QueryJobList",
      body: "*",
    };
  }
  // 查询任务状态信息, 用于获取运行中的任务的变化数据
  rpc QueryJobStateInfo(QueryJobStateInfoReq) returns (QueryJobStateInfoRsp) {
    option (google.api.http) = {
      post: "/BatchJob/QueryJobStateInfo",
      body: "*",
    };
  }
  // 查询任务的数据日志
  rpc QueryJobDataLog(QueryJobDataLogReq) returns (QueryJobDataLogRsp) {
    option (google.api.http) = {
      post: "/BatchJob/QueryJobDataLog",
      body: "*",
    };
  }

  // 发送业务启动信号. 要求任务必须处于 JobStatus.WaitBizRun 状态
  rpc BizStartJob(BizStartJobReq) returns (BizStartJobRsp) {
    option (google.api.http) = {
      post: "/BatchJob/BizStartJob",
      body: "*",
    };
  }
  // 更新任务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态可以使用
  rpc BizUpdateJobData(BizUpdateJobDataReq) returns (BizUpdateJobDataRsp) {
    option (google.api.http) = {
      post: "/BatchJob/BizUpdateJobData",
      body: "*",
    };
  }
  // 发送停止任务信号. 一般为业务判断任务无法继续的时候
  rpc BizStopJob(BizStopJobReq) returns (BizStopJobRsp) {
    option (google.api.http) = {
      post: "/BatchJob/BizStopJob",
      body: "*",
    };
  }
  // 增加数据日志
  rpc BizAddDataLog(BizAddDataLogReq) returns (BizAddDataLogRsp) {
    option (google.api.http) = {
      post: "/BatchJob/BizAddDataLog",
      body: "*",
    };
  }

}

// 速率类型
enum RateType {
  RateType_RateSec = 0; // 标准限速
  RateType_Serialization = 1; // 串行化限速
}

// 执行类型
enum ExecType {
  ExecType_None = 0;
  ExecType_HttpCallback = 1; // http回调
}

// 执行器扩展数据-请求
message ExecExtendDataQ {
  ExecExtendDataHttpCallbackQ httpCallback = 1;
}

// 执行器扩展数据-请求-HttpCallback
message ExecExtendDataHttpCallbackQ {
  string cbBeforeCreate = 1 [(validate.rules).string = {uri: true, ignore_empty: true}]; // 创建和修改任务回调url
  string cbBeforeRun = 2 [(validate.rules).string = {uri: true, ignore_empty: true}]; // 启动前回调. 一旦配置, 则任务必须由业务主动调用 BizStartJob 执行任务. 否则任务将一直处于 JobStatus.WaitBizRun 状态
  string cbProcess = 3 [(validate.rules).string = {uri: true}]; // 处理任务回调. 必填
  string cbProcessStop = 4 [(validate.rules).string = {uri: true, ignore_empty: true}]; // 任务停止回调. 用于业务方做一些清理. 选填
  int32 cbBeforeCreateTimeout = 5 [(validate.rules).int32.gte = 0]; // 启动前回调超时秒数
  int32 cbBeforeRunTimeout = 6 [(validate.rules).int32.gte = 0]; // 启动前回调超时秒数
  int32 cbProcessTimeout = 7 [(validate.rules).int32.gte = 0]; // 处理任务回调超时秒数
  int32 cbProcessStopTimeout = 8 [(validate.rules).int32.gte = 0]; // 处理任务停止回调超时秒数
}

// 执行器扩展数据-响应
message ExecExtendDataA {
  ExecExtendDataHttpCallbackA httpCallback = 1;
}

// 执行器扩展数据-响应-HttpCallback
message ExecExtendDataHttpCallbackA {
  string cbBeforeCreate = 1; // 创建和修改任务回调url
  string cbBeforeRun = 2; // 启动前回调. 一旦配置, 则任务必须由业务主动调用 BizStartJob 执行任务. 否则任务将一直处于 JobStatus.WaitBizRun 状态
  string cbProcess = 3; // 处理任务回调. 必填
  string cbProcessStop = 4; // 任务停止回调. 用于业务方做一些清理. 选填
  int32 cbBeforeCreateTimeout = 5; // 启动前回调超时秒数
  int32 cbBeforeRunTimeout = 6; // 启动前回调超时秒数
  int32 cbProcessTimeout = 7; // 处理任务回调超时秒数
  int32 cbProcessStopTimeout = 8; // 处理任务停止回调超时秒数
}

// 业务状态
enum BizStatus {
  BizStatus_None = 0; // 正常
  BizStatus_Hidden = 1; // 隐藏
}

message AdminRegistryBizReq {
  string bizName = 2 [(validate.rules).string.min_len = 1]; // 业务名
  string remark = 3; // 备注

  ExecType execType = 4; // 执行类型
  ExecExtendDataQ execExtendData = 5; // 执行器扩展数据

  OpInfoQ op = 6; // 操作信息
  BizStatus status = 7; // 状态 0=正常 1=隐藏
}
message AdminRegistryBizRsp {
  int32 bizId = 1; // 创建的业务id
}

message AdminUpdateBizReq {
  int32 bizId = 1 [(validate.rules).int32.gt = 0]; // 业务id. 必填
  string bizName = 2 [(validate.rules).string.min_len = 1]; // 业务名
  string remark = 3; // 备注

  ExecType execType = 4; // 执行类型
  ExecExtendDataQ execExtendData = 5; // 执行器扩展数据

  OpInfoQ op = 6; // 操作信息
  BizStatus status = 7; // 状态 0=正常 1=隐藏
}
message AdminUpdateBizRsp {}

// 操作信息-请求
message OpInfoQ {
  string opSource = 1; // 操作来源
  string opUserid = 2; // 操作用户id
  string opUserName = 3; // 操作用户名
  string opRemark = 4; // 操作备注
}

// 操作信息-响应
message OpInfoA {
  string opSource = 1; // 操作来源
  string opUserid = 2; // 操作用户id
  string opUserName = 3; // 操作用户名
  string opRemark = 4; // 操作描述
  int64 opTime = 5; // 操作秒级时间戳
}

// 业务操作历史-响应
message BizOpHistoryA {
  OpInfoA op = 1; // 操作信息
  BizInfoA info = 2; // 相关数据
}

// 任务状态
enum JobStatus {
  JobStatus_Created = 0; // 已创建
  JobStatus_WaitBizRun = 1; // 等待业务主动启动
  JobStatus_Running = 2; // 运行中
  JobStatus_Finished = 3; // 已完成
  JobStatus_Stopping = 4; // 正在停止
  JobStatus_Stopped = 5; // 已停止
}

// 任务状态
enum JobStatusQ {
  JobStatusQ_All = 0; // 所有状态
  JobStatusQ_Created = 1; // 待启动: 已创建/已停止
  JobStatusQ_Running = 2; // 运行中: 运行中/等待业务主动启动/正在停止
  JobStatusQ_Finished = 3; // 已完成
}

// 业务信息-响应
message BizInfoA {
  int32 bizId = 1; // 业务id
  string bizName = 2; // 业务名
  string remark = 3; // 备注
  ExecType execType = 4; // 执行类型
  ExecExtendDataA execExtendData = 5; // 执行器扩展数据

  OpInfoA op = 6; // 操作信息
  BizStatus status = 7; // 状态 0=正常 1=隐藏
  int64 createTime = 8; // 创建时间秒级时间戳
}

// 业务信息-响应
message BizInfoByListA {
  int32 bizId = 1; // 业务id. 必填
  string bizName = 2; // 业务名
  string remark = 3; // 备注
  ExecType execType = 4; // 执行类型
  OpInfoA op = 5; // 操作信息
  BizStatus status = 6; // 状态 0=正常 1=隐藏
}

// 任务信息-响应
message JobInfoA {
  int64 jobId = 1; // 任务id
  string jobName = 2; // 任务名称
  int32 bizId = 3; // 业务id
  string jobData = 4; // 任务数据, 让业务知道应该做什么
  int64 processDataTotal = 5; // 业务中需要处理数据总数
  int64 processedCount = 6; // 已处理过的数据量, 无论成功还是失败
  int64 errLogCount = 7; // 错误日志数
  JobStatus status = 8; // 任务状态
  int64 createTime = 9; // 创建时间秒级时间戳
  RateType rateType = 10; // 速率类型
  int32 rateSec = 11; // 每秒处理速率. 0表示不限制
  OpInfoA op = 12; // 操作信息
  string statusInfo = 13; // 状态信息
}

// 任务基础信息-响应
message JobInfoByListA {
  int64 jobId = 1; // 任务id
  string jobName = 2; // 任务名称
  int32 bizId = 3; // 业务id
  int64 processDataTotal = 4; // 业务中需要处理数据总数
  int64 processedCount = 5; // 已处理过的数据量, 无论成功还是失败
  int64 errLogCount = 6; // 错误日志数
  JobStatus status = 7; // 任务状态
  int64 createTime = 8; // 创建时间秒级时间戳
  RateType rateType = 9; // 速率类型
  int32 rateSec = 10; // 每秒处理速率. 0表示不限制
  OpInfoA op = 11; // 操作信息
  string statusInfo = 12; // 状态信息
}

// 数据的日志类型
enum DataLogType {
  DataLogType_Debug = 0; // 调试
  DataLogType_Info = 1; // 信息
  DataLogType_Warn = 2; // 警告
  DataLogType_Err = 3; // 错误
  DataLogType_ErrData = 4; // 错误数据, 表示放弃处理这个数据了. 这个日志会被认为是错误计数
}

// 日志-请求
message DataLogQ {
  string dataId = 1; // 数据id
  string remark = 2; // 备注
  string extend = 3; // 扩展数据
  DataLogType logType = 4; // 日志类型
}

// 日志-响应
message LogInfoByListA {
  string dataId = 1; // 数据id
  string remark = 2; // 备注
  string extend = 3; // 扩展数据
  DataLogType logType = 4; // 日志类型
  int64 createTime = 5; // 创建时间秒级时间戳
}

message AdminCreateJobReq {
  int32 bizId = 1 [(validate.rules).int32.gt = 0]; // 业务id. 必填
  string jobName = 2; // 任务名称
  string jobData = 3; // 任务数据, 让业务知道应该做什么
  int64 processDataTotal = 4; // 需要处理数据总数
  int64 processedCount = 5; // 已处理过的数据量, 无论成功还是失败
  RateType rateType = 6; // 速率类型
  int32 rateSec = 7; // 每秒处理速率. 0表示不限制
  OpInfoQ op = 8; // 操作信息
  bool startNow = 9; // 创建后是否立即启动
}
message AdminCreateJobRsp {
  int64 jobId = 1; // 创建的任务id
}

message AdminUpdateJobReq {
  string jobName = 2; // 任务名称
  string jobData = 3; // 任务数据, 让业务知道应该做什么
  int64 processDataTotal = 4; // 需要处理数据总数
  int64 processedCount = 5; // 已处理过的数据量, 无论成功还是失败
  RateType rateType = 6; // 速率类型
  int32 rateSec = 7; // 每秒处理速率. 0表示不限制
  OpInfoQ op = 8; // 操作信息
  int64 jobId = 9; // 任务id
}
message AdminUpdateJobRsp {
}

message AdminStartJobReq {
  int64 jobId = 1 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
  OpInfoQ op = 2; // 操作信息
}
message AdminStartJobRsp {}

message AdminStopJobReq {
  int64 jobId = 1 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
  OpInfoQ op = 2; // 操作信息
}
message AdminStopJobRsp {}

message QueryAllBizNameReq {}
message QueryAllBizNameRsp {
  message LineA {
    int32 bizId = 1; // 业务id. 必填
    string bizName = 2; // 业务名
    BizStatus status = 3; // 状态 0=正常 1=隐藏
  }
  repeated LineA line = 1;
}

message QueryBizInfoReq {
  int32 bizId = 1 [(validate.rules).int32.gt = 0]; // 创建的业务id. 必填
}
message QueryBizInfoRsp {
  BizInfoA line = 1; // 业务信息
}

message QueryBizListReq {
  int32 page = 1 [(validate.rules).int32.gt = 0]; // 页号, 从1开始
  int32 pageSize = 2 [(validate.rules).int32.gte = 5]; // 每页返回数量, 最少返回5条
  int32 bizId = 3 [(validate.rules).int32.gte = 0]; // 业务id
  string opUser = 4; // 操作人
  BizStatus status = 5; // 状态 0=正常 1=隐藏
}
message QueryBizListRsp {
  int32 total = 1; // 总条数
  int32 pageSize = 2; // 当前分一页预期返回条数
  repeated BizInfoByListA line = 3; // 业务信息
}

message QueryJobInfoReq {
  int64 jobId = 1 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
}
message QueryJobInfoRsp {
  JobInfoA line = 1; // 任务信息
}

message QueryJobListReq {
  int32 page = 1 [(validate.rules).int32.gt = 0]; // 页号, 从1开始
  int32 pageSize = 2 [(validate.rules).int32.gte = 5]; // 每页返回数量, 最少返回5条
  int32 bizId = 3 [(validate.rules).int32.gte = 0]; // 业务id
  JobStatusQ status = 4; // 任务状态
  int64 startTime = 5; // 开始时间, 秒级时间戳. 0表示不限制
  int64 endTime = 6; // 结束时间, 秒级时间戳. 0表示不限制
  string opUser = 7; // 操作人
}
message QueryJobListRsp {
  int32 total = 1; // 总条数
  int32 pageSize = 2; // 当前分一页预期返回条数
  repeated JobInfoByListA line = 3; // 基础任务信息
}

message QueryJobStateInfoReq {
  repeated int64 jobIds = 1; // 要查询的任务id列表
}
message JobStateInfo {
  int64 jobId = 1; // 任务id
  int64 processDataTotal = 2; // 业务中需要处理数据总数
  int64 processedCount = 3; // 已处理过的数据量, 无论成功还是失败
  int64 errLogCount = 4; // 错误日志数
  JobStatus status = 5; // 任务状态
  OpInfoA op = 6; // 操作信息
  string statusInfo = 7; // 状态信息
}
message QueryJobStateInfoRsp {
  repeated JobStateInfo jobStateInfos = 1;
}

message QueryJobDataLogReq {
  int64 jobId = 1 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
  int64 nextCursor = 2; // 下一页数据游标
  int32 pageSize = 3 [(validate.rules).int32.gte = 5]; // 每页返回数量, 最少返回5条
  int64 startTime = 4; // 开始时间, 秒级时间戳. 0表示不限制
  int64 endTime = 5; // 结束时间, 秒级时间戳. 0表示不限制
  repeated DataLogType logType = 6; // 日志类型
}
message QueryJobDataLogRsp {
  int64 nextCursor = 1; // 下一页数据游标
  int32 pageSize = 2; // 当前分一页预期返回条数
  repeated LogInfoByListA line = 3; // 日志
}

message BizStartJobReq {
  string authCode = 1 [(validate.rules).string = {}]; // 授权码, 防止其它业务线程抢锁
  int64 jobId = 2 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
  string remark = 3; // 备注
}
message BizStartJobRsp {}

message BizUpdateJobDataReq {
  string authCode = 1 [(validate.rules).string = {}]; // 授权码, 防止其它业务线程抢锁
  int64 jobId = 2 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
  string jobData = 3; // 任务数据, 让业务知道应该做什么. 空值则不会更新这个数据
  int64 processDataTotal = 4; // 需要处理数据总数. 空值则不会更新这个数据
  int64 processedCount = 5; // 已处理过的数据量, 无论成功还是失败. 空值则不会更新这个数据
  string remark = 6; // 备注
}
message BizUpdateJobDataRsp {}

message BizStopJobReq {
  int64 jobId = 1 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
  string remark = 2; // 备注
}
message BizStopJobRsp {}

message BizAddDataLogReq {
  int64 jobId = 1 [(validate.rules).int64.gt = 0]; // 创建的任务id. 必填
  repeated DataLogQ log = 2; // 日志内容
}
message BizAddDataLogRsp {}

// ---------- 业务回调参数 ----------

// 创建和修改任务前回调参数
message JobBeforeCreateAndChangeReq {
  string jobName = 1; // 任务名称
  int32 bizId = 2; // 业务id. 必填
  string jobData = 3; // 任务数据, 让业务知道应该做什么
  int64 processDataTotal = 4; // 需要处理数据总数
  int64 processedCount = 5; // 已处理过的数据量, 无论成功还是失败
  RateType rateType = 6; // 速率类型
  int32 rateSec = 7; // 每秒处理速率. 0表示不限制
  int64 jobId = 8; // 任务id
  bool isCreate = 9; // 是否为创建
}
message JobBeforeCreateAndChangeRsp {}

// 任务启动前回调参数
message JobBeforeRunReq {
  int64 jobId = 1; // 任务id
  string jobName = 2; // 任务名称
  int32 bizId = 3; // 业务id
  string bizName = 4; // 业务名
  string jobData = 5; // 任务数据, 让业务知道应该做什么
  int64 processDataTotal = 6; // 业务中需要处理数据总数
  int64 processedCount = 7; // 已处理过的数据量, 无论成功还是失败
  string authCode = 8; // 授权码, 调用业务方法时传参, 用于防止业务多线程抢锁
}
message JobBeforeRunRsp {}

// 任务处理回调参数
message JobProcessReq {
  int64 jobId = 1; // 创建的任务id. 必填
  int64 dataIndex = 2; // 要处理的数据索引, 从0开始
}
message JobProcessRsp {}

// 任务停止回调参数
message JobProcessStopReq {
  int64 jobId = 1; // 任务id
  string jobName = 2; // 任务名称
  int32 bizId = 3; // 业务id
  string bizName = 4; // 业务名
  string jobData = 5; // 任务数据, 让业务知道应该做什么
  int64 processDataTotal = 6; // 业务中需要处理数据总数
  int64 processedCount = 7; // 已处理过的数据量, 无论成功还是失败
  bool isFinished = 8; // 任务是否已完成
}
message JobProcessStopRsp {}
