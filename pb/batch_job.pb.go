// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: batch_job.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 速率类型
type RateType int32

const (
	RateType_RateType_RateSec       RateType = 0 // 标准限速
	RateType_RateType_Serialization RateType = 1 // 串行化限速
)

// Enum value maps for RateType.
var (
	RateType_name = map[int32]string{
		0: "RateType_RateSec",
		1: "RateType_Serialization",
	}
	RateType_value = map[string]int32{
		"RateType_RateSec":       0,
		"RateType_Serialization": 1,
	}
)

func (x RateType) Enum() *RateType {
	p := new(RateType)
	*p = x
	return p
}

func (x RateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateType) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_job_proto_enumTypes[0].Descriptor()
}

func (RateType) Type() protoreflect.EnumType {
	return &file_batch_job_proto_enumTypes[0]
}

func (x RateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateType.Descriptor instead.
func (RateType) EnumDescriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{0}
}

// 执行类型
type ExecType int32

const (
	ExecType_ExecType_None         ExecType = 0
	ExecType_ExecType_HttpCallback ExecType = 1 // http回调
)

// Enum value maps for ExecType.
var (
	ExecType_name = map[int32]string{
		0: "ExecType_None",
		1: "ExecType_HttpCallback",
	}
	ExecType_value = map[string]int32{
		"ExecType_None":         0,
		"ExecType_HttpCallback": 1,
	}
)

func (x ExecType) Enum() *ExecType {
	p := new(ExecType)
	*p = x
	return p
}

func (x ExecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecType) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_job_proto_enumTypes[1].Descriptor()
}

func (ExecType) Type() protoreflect.EnumType {
	return &file_batch_job_proto_enumTypes[1]
}

func (x ExecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecType.Descriptor instead.
func (ExecType) EnumDescriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{1}
}

// 业务状态
type BizStatus int32

const (
	BizStatus_BizStatus_None   BizStatus = 0 // 正常
	BizStatus_BizStatus_Hidden BizStatus = 1 // 隐藏
)

// Enum value maps for BizStatus.
var (
	BizStatus_name = map[int32]string{
		0: "BizStatus_None",
		1: "BizStatus_Hidden",
	}
	BizStatus_value = map[string]int32{
		"BizStatus_None":   0,
		"BizStatus_Hidden": 1,
	}
)

func (x BizStatus) Enum() *BizStatus {
	p := new(BizStatus)
	*p = x
	return p
}

func (x BizStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_job_proto_enumTypes[2].Descriptor()
}

func (BizStatus) Type() protoreflect.EnumType {
	return &file_batch_job_proto_enumTypes[2]
}

func (x BizStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BizStatus.Descriptor instead.
func (BizStatus) EnumDescriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{2}
}

// 任务状态
type JobStatus int32

const (
	JobStatus_Created    JobStatus = 0 // 已创建
	JobStatus_WaitBizRun JobStatus = 1 // 等待业务主动启动
	JobStatus_Running    JobStatus = 2 // 运行中
	JobStatus_Finished   JobStatus = 3 // 已完成
	JobStatus_Stopping   JobStatus = 4 // 正在停止
	JobStatus_Stopped    JobStatus = 5 // 已停止
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "Created",
		1: "WaitBizRun",
		2: "Running",
		3: "Finished",
		4: "Stopping",
		5: "Stopped",
	}
	JobStatus_value = map[string]int32{
		"Created":    0,
		"WaitBizRun": 1,
		"Running":    2,
		"Finished":   3,
		"Stopping":   4,
		"Stopped":    5,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_job_proto_enumTypes[3].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_batch_job_proto_enumTypes[3]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{3}
}

// 数据的日志类型
type DataLogType int32

const (
	DataLogType_Debug DataLogType = 0 // 调试
	DataLogType_Info  DataLogType = 1 // 信息
	DataLogType_Warn  DataLogType = 2 // 警告
	DataLogType_Err   DataLogType = 3 // 错误
)

// Enum value maps for DataLogType.
var (
	DataLogType_name = map[int32]string{
		0: "Debug",
		1: "Info",
		2: "Warn",
		3: "Err",
	}
	DataLogType_value = map[string]int32{
		"Debug": 0,
		"Info":  1,
		"Warn":  2,
		"Err":   3,
	}
)

func (x DataLogType) Enum() *DataLogType {
	p := new(DataLogType)
	*p = x
	return p
}

func (x DataLogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataLogType) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_job_proto_enumTypes[4].Descriptor()
}

func (DataLogType) Type() protoreflect.EnumType {
	return &file_batch_job_proto_enumTypes[4]
}

func (x DataLogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataLogType.Descriptor instead.
func (DataLogType) EnumDescriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{4}
}

type AdminRegistryBizReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizType               int32     `protobuf:"varint,1,opt,name=bizType,proto3" json:"bizType,omitempty"`                             // 业务类型. 必填
	BizName               string    `protobuf:"bytes,2,opt,name=bizName,proto3" json:"bizName,omitempty"`                              // 业务名
	Remark                string    `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                                // 备注
	ExecType              ExecType  `protobuf:"varint,4,opt,name=execType,proto3,enum=batch_job.ExecType" json:"execType,omitempty"`   // 执行类型
	CbBeforeCreate        string    `protobuf:"bytes,5,opt,name=cbBeforeCreate,proto3" json:"cbBeforeCreate,omitempty"`                // 创建任务回调url
	CbBeforeRun           string    `protobuf:"bytes,6,opt,name=cbBeforeRun,proto3" json:"cbBeforeRun,omitempty"`                      // 启动前回调. 一旦配置, 则任务必须由业务主动调用 BizStartJob 执行任务. 否则任务将一直处于 JobStatus.WaitBizRun 状态
	CbProcess             string    `protobuf:"bytes,7,opt,name=cbProcess,proto3" json:"cbProcess,omitempty"`                          // 处理任务回调. 必填
	CbProcessStop         string    `protobuf:"bytes,8,opt,name=cbProcessStop,proto3" json:"cbProcessStop,omitempty"`                  // 任务停止回调. 用于业务方做一些清理. 选填
	CbBeforeCreateTimeout int32     `protobuf:"varint,9,opt,name=cbBeforeCreateTimeout,proto3" json:"cbBeforeCreateTimeout,omitempty"` // 启动前回调超时秒数
	CbBeforeRunTimeout    int32     `protobuf:"varint,10,opt,name=cbBeforeRunTimeout,proto3" json:"cbBeforeRunTimeout,omitempty"`      // 启动前回调超时秒数
	CbProcessTimeout      int32     `protobuf:"varint,11,opt,name=cbProcessTimeout,proto3" json:"cbProcessTimeout,omitempty"`          // 处理任务回调超时秒数
	CbProcessStopTimeout  int32     `protobuf:"varint,12,opt,name=cbProcessStopTimeout,proto3" json:"cbProcessStopTimeout,omitempty"`  // 处理任务停止回调超时秒数
	RateType              RateType  `protobuf:"varint,13,opt,name=rateType,proto3,enum=batch_job.RateType" json:"rateType,omitempty"`  // 速率类型
	RateSec               int32     `protobuf:"varint,14,opt,name=rateSec,proto3" json:"rateSec,omitempty"`                            // 每秒处理速率. 0表示不限制
	Op                    *OpInfoQ  `protobuf:"bytes,15,opt,name=op,proto3" json:"op,omitempty"`                                       // 操作信息
	Status                BizStatus `protobuf:"varint,16,opt,name=status,proto3,enum=batch_job.BizStatus" json:"status,omitempty"`     // 状态 0=正常 1=隐藏
}

func (x *AdminRegistryBizReq) Reset() {
	*x = AdminRegistryBizReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRegistryBizReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRegistryBizReq) ProtoMessage() {}

func (x *AdminRegistryBizReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRegistryBizReq.ProtoReflect.Descriptor instead.
func (*AdminRegistryBizReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{0}
}

func (x *AdminRegistryBizReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *AdminRegistryBizReq) GetBizName() string {
	if x != nil {
		return x.BizName
	}
	return ""
}

func (x *AdminRegistryBizReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AdminRegistryBizReq) GetExecType() ExecType {
	if x != nil {
		return x.ExecType
	}
	return ExecType_ExecType_None
}

func (x *AdminRegistryBizReq) GetCbBeforeCreate() string {
	if x != nil {
		return x.CbBeforeCreate
	}
	return ""
}

func (x *AdminRegistryBizReq) GetCbBeforeRun() string {
	if x != nil {
		return x.CbBeforeRun
	}
	return ""
}

func (x *AdminRegistryBizReq) GetCbProcess() string {
	if x != nil {
		return x.CbProcess
	}
	return ""
}

func (x *AdminRegistryBizReq) GetCbProcessStop() string {
	if x != nil {
		return x.CbProcessStop
	}
	return ""
}

func (x *AdminRegistryBizReq) GetCbBeforeCreateTimeout() int32 {
	if x != nil {
		return x.CbBeforeCreateTimeout
	}
	return 0
}

func (x *AdminRegistryBizReq) GetCbBeforeRunTimeout() int32 {
	if x != nil {
		return x.CbBeforeRunTimeout
	}
	return 0
}

func (x *AdminRegistryBizReq) GetCbProcessTimeout() int32 {
	if x != nil {
		return x.CbProcessTimeout
	}
	return 0
}

func (x *AdminRegistryBizReq) GetCbProcessStopTimeout() int32 {
	if x != nil {
		return x.CbProcessStopTimeout
	}
	return 0
}

func (x *AdminRegistryBizReq) GetRateType() RateType {
	if x != nil {
		return x.RateType
	}
	return RateType_RateType_RateSec
}

func (x *AdminRegistryBizReq) GetRateSec() int32 {
	if x != nil {
		return x.RateSec
	}
	return 0
}

func (x *AdminRegistryBizReq) GetOp() *OpInfoQ {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *AdminRegistryBizReq) GetStatus() BizStatus {
	if x != nil {
		return x.Status
	}
	return BizStatus_BizStatus_None
}

type AdminRegistryBizRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminRegistryBizRsp) Reset() {
	*x = AdminRegistryBizRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRegistryBizRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRegistryBizRsp) ProtoMessage() {}

func (x *AdminRegistryBizRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRegistryBizRsp.ProtoReflect.Descriptor instead.
func (*AdminRegistryBizRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{1}
}

// 操作信息-请求
type OpInfoQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpSource   string `protobuf:"bytes,1,opt,name=opSource,proto3" json:"opSource,omitempty"`     // 操作来源
	OpUserid   string `protobuf:"bytes,2,opt,name=opUserid,proto3" json:"opUserid,omitempty"`     // 操作用户id
	OpUserName string `protobuf:"bytes,3,opt,name=opUserName,proto3" json:"opUserName,omitempty"` // 操作用户名
	OpRemark   string `protobuf:"bytes,4,opt,name=opRemark,proto3" json:"opRemark,omitempty"`     // 操作备注
}

func (x *OpInfoQ) Reset() {
	*x = OpInfoQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpInfoQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpInfoQ) ProtoMessage() {}

func (x *OpInfoQ) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpInfoQ.ProtoReflect.Descriptor instead.
func (*OpInfoQ) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{2}
}

func (x *OpInfoQ) GetOpSource() string {
	if x != nil {
		return x.OpSource
	}
	return ""
}

func (x *OpInfoQ) GetOpUserid() string {
	if x != nil {
		return x.OpUserid
	}
	return ""
}

func (x *OpInfoQ) GetOpUserName() string {
	if x != nil {
		return x.OpUserName
	}
	return ""
}

func (x *OpInfoQ) GetOpRemark() string {
	if x != nil {
		return x.OpRemark
	}
	return ""
}

// 操作信息-响应
type OpInfoA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpSource   string `protobuf:"bytes,1,opt,name=opSource,proto3" json:"opSource,omitempty"`     // 操作来源
	OpUserid   string `protobuf:"bytes,2,opt,name=opUserid,proto3" json:"opUserid,omitempty"`     // 操作用户id
	OpUserName string `protobuf:"bytes,3,opt,name=opUserName,proto3" json:"opUserName,omitempty"` // 操作用户名
	OpRemark   string `protobuf:"bytes,4,opt,name=opRemark,proto3" json:"opRemark,omitempty"`     // 操作描述
	OpTime     int64  `protobuf:"varint,5,opt,name=opTime,proto3" json:"opTime,omitempty"`        // 操作秒级时间戳
}

func (x *OpInfoA) Reset() {
	*x = OpInfoA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpInfoA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpInfoA) ProtoMessage() {}

func (x *OpInfoA) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpInfoA.ProtoReflect.Descriptor instead.
func (*OpInfoA) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{3}
}

func (x *OpInfoA) GetOpSource() string {
	if x != nil {
		return x.OpSource
	}
	return ""
}

func (x *OpInfoA) GetOpUserid() string {
	if x != nil {
		return x.OpUserid
	}
	return ""
}

func (x *OpInfoA) GetOpUserName() string {
	if x != nil {
		return x.OpUserName
	}
	return ""
}

func (x *OpInfoA) GetOpRemark() string {
	if x != nil {
		return x.OpRemark
	}
	return ""
}

func (x *OpInfoA) GetOpTime() int64 {
	if x != nil {
		return x.OpTime
	}
	return 0
}

// 业务操作历史-响应
type BizOpHistoryA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op   *OpInfoA  `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`     // 操作信息
	Info *BizInfoA `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"` // 相关数据
}

func (x *BizOpHistoryA) Reset() {
	*x = BizOpHistoryA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizOpHistoryA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizOpHistoryA) ProtoMessage() {}

func (x *BizOpHistoryA) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizOpHistoryA.ProtoReflect.Descriptor instead.
func (*BizOpHistoryA) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{4}
}

func (x *BizOpHistoryA) GetOp() *OpInfoA {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *BizOpHistoryA) GetInfo() *BizInfoA {
	if x != nil {
		return x.Info
	}
	return nil
}

// 业务信息-响应
type BizInfoA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizType               int32     `protobuf:"varint,1,opt,name=bizType,proto3" json:"bizType,omitempty"`                             // 业务类型. 必填
	BizName               string    `protobuf:"bytes,2,opt,name=bizName,proto3" json:"bizName,omitempty"`                              // 业务名
	Remark                string    `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                                // 备注
	ExecType              ExecType  `protobuf:"varint,4,opt,name=execType,proto3,enum=batch_job.ExecType" json:"execType,omitempty"`   // 执行类型
	CbBeforeCreate        string    `protobuf:"bytes,5,opt,name=cbBeforeCreate,proto3" json:"cbBeforeCreate,omitempty"`                // 创建任务回调url
	CbBeforeRun           string    `protobuf:"bytes,6,opt,name=cbBeforeRun,proto3" json:"cbBeforeRun,omitempty"`                      // 启动前回调. 一旦配置, 则任务必须由业务主动调用 BizStartJob 执行任务. 否则任务将一直处于 JobStatus.WaitBizRun 状态
	CbProcess             string    `protobuf:"bytes,7,opt,name=cbProcess,proto3" json:"cbProcess,omitempty"`                          // 处理任务回调
	CbProcessStop         string    `protobuf:"bytes,8,opt,name=cbProcessStop,proto3" json:"cbProcessStop,omitempty"`                  // 处理任务停止回调. 用于业务方做一些清理
	CbBeforeCreateTimeout int32     `protobuf:"varint,9,opt,name=cbBeforeCreateTimeout,proto3" json:"cbBeforeCreateTimeout,omitempty"` // 启动前回调超时秒数
	CbBeforeRunTimeout    int32     `protobuf:"varint,10,opt,name=cbBeforeRunTimeout,proto3" json:"cbBeforeRunTimeout,omitempty"`      // 启动前回调超时秒数
	CbProcessTimeout      int32     `protobuf:"varint,11,opt,name=cbProcessTimeout,proto3" json:"cbProcessTimeout,omitempty"`          // 处理任务回调超时秒数
	CbProcessStopTimeout  int32     `protobuf:"varint,12,opt,name=cbProcessStopTimeout,proto3" json:"cbProcessStopTimeout,omitempty"`  // 处理任务停止回调超时秒数
	RateType              RateType  `protobuf:"varint,13,opt,name=rateType,proto3,enum=batch_job.RateType" json:"rateType,omitempty"`  // 速率类型
	RateSec               int32     `protobuf:"varint,14,opt,name=rateSec,proto3" json:"rateSec,omitempty"`                            // 每秒处理速率. 0表示不限制
	Op                    *OpInfoA  `protobuf:"bytes,15,opt,name=op,proto3" json:"op,omitempty"`                                       // 操作信息
	Status                BizStatus `protobuf:"varint,16,opt,name=status,proto3,enum=batch_job.BizStatus" json:"status,omitempty"`     // 状态 0=正常 1=隐藏
}

func (x *BizInfoA) Reset() {
	*x = BizInfoA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizInfoA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizInfoA) ProtoMessage() {}

func (x *BizInfoA) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizInfoA.ProtoReflect.Descriptor instead.
func (*BizInfoA) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{5}
}

func (x *BizInfoA) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *BizInfoA) GetBizName() string {
	if x != nil {
		return x.BizName
	}
	return ""
}

func (x *BizInfoA) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *BizInfoA) GetExecType() ExecType {
	if x != nil {
		return x.ExecType
	}
	return ExecType_ExecType_None
}

func (x *BizInfoA) GetCbBeforeCreate() string {
	if x != nil {
		return x.CbBeforeCreate
	}
	return ""
}

func (x *BizInfoA) GetCbBeforeRun() string {
	if x != nil {
		return x.CbBeforeRun
	}
	return ""
}

func (x *BizInfoA) GetCbProcess() string {
	if x != nil {
		return x.CbProcess
	}
	return ""
}

func (x *BizInfoA) GetCbProcessStop() string {
	if x != nil {
		return x.CbProcessStop
	}
	return ""
}

func (x *BizInfoA) GetCbBeforeCreateTimeout() int32 {
	if x != nil {
		return x.CbBeforeCreateTimeout
	}
	return 0
}

func (x *BizInfoA) GetCbBeforeRunTimeout() int32 {
	if x != nil {
		return x.CbBeforeRunTimeout
	}
	return 0
}

func (x *BizInfoA) GetCbProcessTimeout() int32 {
	if x != nil {
		return x.CbProcessTimeout
	}
	return 0
}

func (x *BizInfoA) GetCbProcessStopTimeout() int32 {
	if x != nil {
		return x.CbProcessStopTimeout
	}
	return 0
}

func (x *BizInfoA) GetRateType() RateType {
	if x != nil {
		return x.RateType
	}
	return RateType_RateType_RateSec
}

func (x *BizInfoA) GetRateSec() int32 {
	if x != nil {
		return x.RateSec
	}
	return 0
}

func (x *BizInfoA) GetOp() *OpInfoA {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *BizInfoA) GetStatus() BizStatus {
	if x != nil {
		return x.Status
	}
	return BizStatus_BizStatus_None
}

// 任务基础信息-响应
type JobBaseInfoA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId            int64     `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"`                            // 任务id
	BizType          int32     `protobuf:"varint,2,opt,name=bizType,proto3" json:"bizType,omitempty"`                        // 业务类型
	BizData          string    `protobuf:"bytes,3,opt,name=bizData,proto3" json:"bizData,omitempty"`                         // 业务任务数据, 让业务知道应该做什么
	ProcessDataTotal int64     `protobuf:"varint,4,opt,name=processDataTotal,proto3" json:"processDataTotal,omitempty"`      // 业务中需要处理数据总数
	ProcessedNum     int64     `protobuf:"varint,5,opt,name=processedNum,proto3" json:"processedNum,omitempty"`              // 已处理过的数据量, 无论成功还是失败
	ErrLogNum        int64     `protobuf:"varint,6,opt,name=errLogNum,proto3" json:"errLogNum,omitempty"`                    // 错误日志数
	Status           JobStatus `protobuf:"varint,7,opt,name=status,proto3,enum=batch_job.JobStatus" json:"status,omitempty"` // 任务状态
	CreateTime       int64     `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`                  // 创建时间秒级时间戳
	Op               *OpInfoA  `protobuf:"bytes,9,opt,name=op,proto3" json:"op,omitempty"`                                   // 操作信息
	StatusInfo       string    `protobuf:"bytes,10,opt,name=statusInfo,proto3" json:"statusInfo,omitempty"`                  // 状态信息
}

func (x *JobBaseInfoA) Reset() {
	*x = JobBaseInfoA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobBaseInfoA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobBaseInfoA) ProtoMessage() {}

func (x *JobBaseInfoA) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobBaseInfoA.ProtoReflect.Descriptor instead.
func (*JobBaseInfoA) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{6}
}

func (x *JobBaseInfoA) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *JobBaseInfoA) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *JobBaseInfoA) GetBizData() string {
	if x != nil {
		return x.BizData
	}
	return ""
}

func (x *JobBaseInfoA) GetProcessDataTotal() int64 {
	if x != nil {
		return x.ProcessDataTotal
	}
	return 0
}

func (x *JobBaseInfoA) GetProcessedNum() int64 {
	if x != nil {
		return x.ProcessedNum
	}
	return 0
}

func (x *JobBaseInfoA) GetErrLogNum() int64 {
	if x != nil {
		return x.ErrLogNum
	}
	return 0
}

func (x *JobBaseInfoA) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_Created
}

func (x *JobBaseInfoA) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *JobBaseInfoA) GetOp() *OpInfoA {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *JobBaseInfoA) GetStatusInfo() string {
	if x != nil {
		return x.StatusInfo
	}
	return ""
}

// 日志-请求
type DataLogQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId  string      `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`                               // 数据id
	Remark  string      `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`                               // 备注
	Extend  string      `protobuf:"bytes,3,opt,name=extend,proto3" json:"extend,omitempty"`                               // 扩展数据
	LogType DataLogType `protobuf:"varint,4,opt,name=logType,proto3,enum=batch_job.DataLogType" json:"logType,omitempty"` // 日志类型
}

func (x *DataLogQ) Reset() {
	*x = DataLogQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLogQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLogQ) ProtoMessage() {}

func (x *DataLogQ) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLogQ.ProtoReflect.Descriptor instead.
func (*DataLogQ) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{7}
}

func (x *DataLogQ) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

func (x *DataLogQ) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DataLogQ) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *DataLogQ) GetLogType() DataLogType {
	if x != nil {
		return x.LogType
	}
	return DataLogType_Debug
}

// 日志-响应
type DataLogA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId     string      `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`                               // 数据id
	Remark     string      `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`                               // 备注
	Extend     string      `protobuf:"bytes,3,opt,name=extend,proto3" json:"extend,omitempty"`                               // 扩展数据
	LogType    DataLogType `protobuf:"varint,4,opt,name=logType,proto3,enum=batch_job.DataLogType" json:"logType,omitempty"` // 日志类型
	CreateTime int64       `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`                      // 创建时间秒级时间戳
}

func (x *DataLogA) Reset() {
	*x = DataLogA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLogA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLogA) ProtoMessage() {}

func (x *DataLogA) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLogA.ProtoReflect.Descriptor instead.
func (*DataLogA) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{8}
}

func (x *DataLogA) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

func (x *DataLogA) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DataLogA) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *DataLogA) GetLogType() DataLogType {
	if x != nil {
		return x.LogType
	}
	return DataLogType_Debug
}

func (x *DataLogA) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AdminCreateJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizType          int32    `protobuf:"varint,1,opt,name=bizType,proto3" json:"bizType,omitempty"`                   // 业务类型. 必填
	BizData          string   `protobuf:"bytes,2,opt,name=bizData,proto3" json:"bizData,omitempty"`                    // 业务任务数据, 让业务知道应该做什么
	BizProcessData   string   `protobuf:"bytes,3,opt,name=bizProcessData,proto3" json:"bizProcessData,omitempty"`      // 业务中需要处理的批量数据
	ProcessDataTotal int64    `protobuf:"varint,4,opt,name=processDataTotal,proto3" json:"processDataTotal,omitempty"` // 需要处理数据总数
	StartNow         bool     `protobuf:"varint,5,opt,name=startNow,proto3" json:"startNow,omitempty"`                 // 创建后是否立即启动
	Op               *OpInfoQ `protobuf:"bytes,6,opt,name=op,proto3" json:"op,omitempty"`                              // 操作信息
}

func (x *AdminCreateJobReq) Reset() {
	*x = AdminCreateJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateJobReq) ProtoMessage() {}

func (x *AdminCreateJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateJobReq.ProtoReflect.Descriptor instead.
func (*AdminCreateJobReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{9}
}

func (x *AdminCreateJobReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *AdminCreateJobReq) GetBizData() string {
	if x != nil {
		return x.BizData
	}
	return ""
}

func (x *AdminCreateJobReq) GetBizProcessData() string {
	if x != nil {
		return x.BizProcessData
	}
	return ""
}

func (x *AdminCreateJobReq) GetProcessDataTotal() int64 {
	if x != nil {
		return x.ProcessDataTotal
	}
	return 0
}

func (x *AdminCreateJobReq) GetStartNow() bool {
	if x != nil {
		return x.StartNow
	}
	return false
}

func (x *AdminCreateJobReq) GetOp() *OpInfoQ {
	if x != nil {
		return x.Op
	}
	return nil
}

type AdminCreateJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id
}

func (x *AdminCreateJobRsp) Reset() {
	*x = AdminCreateJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateJobRsp) ProtoMessage() {}

func (x *AdminCreateJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateJobRsp.ProtoReflect.Descriptor instead.
func (*AdminCreateJobRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{10}
}

func (x *AdminCreateJobRsp) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type AdminStartJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64    `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id. 必填
	Op    *OpInfoQ `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`        // 操作信息
}

func (x *AdminStartJobReq) Reset() {
	*x = AdminStartJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminStartJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminStartJobReq) ProtoMessage() {}

func (x *AdminStartJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminStartJobReq.ProtoReflect.Descriptor instead.
func (*AdminStartJobReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{11}
}

func (x *AdminStartJobReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *AdminStartJobReq) GetOp() *OpInfoQ {
	if x != nil {
		return x.Op
	}
	return nil
}

type AdminStartJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminStartJobRsp) Reset() {
	*x = AdminStartJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminStartJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminStartJobRsp) ProtoMessage() {}

func (x *AdminStartJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminStartJobRsp.ProtoReflect.Descriptor instead.
func (*AdminStartJobRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{12}
}

type AdminStopJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64    `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id. 必填
	Op    *OpInfoQ `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`        // 操作信息
}

func (x *AdminStopJobReq) Reset() {
	*x = AdminStopJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminStopJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminStopJobReq) ProtoMessage() {}

func (x *AdminStopJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminStopJobReq.ProtoReflect.Descriptor instead.
func (*AdminStopJobReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{13}
}

func (x *AdminStopJobReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *AdminStopJobReq) GetOp() *OpInfoQ {
	if x != nil {
		return x.Op
	}
	return nil
}

type AdminStopJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminStopJobRsp) Reset() {
	*x = AdminStopJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminStopJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminStopJobRsp) ProtoMessage() {}

func (x *AdminStopJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminStopJobRsp.ProtoReflect.Descriptor instead.
func (*AdminStopJobRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{14}
}

type QueryBizInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizType       int32 `protobuf:"varint,1,opt,name=bizType,proto3" json:"bizType,omitempty"`             // 创建的业务类型. 必填
	NeedOpHistory bool  `protobuf:"varint,2,opt,name=needOpHistory,proto3" json:"needOpHistory,omitempty"` // 是否需要操作历史
}

func (x *QueryBizInfoReq) Reset() {
	*x = QueryBizInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBizInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBizInfoReq) ProtoMessage() {}

func (x *QueryBizInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBizInfoReq.ProtoReflect.Descriptor instead.
func (*QueryBizInfoReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{15}
}

func (x *QueryBizInfoReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *QueryBizInfoReq) GetNeedOpHistory() bool {
	if x != nil {
		return x.NeedOpHistory
	}
	return false
}

type QueryBizInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line *BizInfoA `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"` // 业务信息
}

func (x *QueryBizInfoRsp) Reset() {
	*x = QueryBizInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBizInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBizInfoRsp) ProtoMessage() {}

func (x *QueryBizInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBizInfoRsp.ProtoReflect.Descriptor instead.
func (*QueryBizInfoRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{16}
}

func (x *QueryBizInfoRsp) GetLine() *BizInfoA {
	if x != nil {
		return x.Line
	}
	return nil
}

type QueryBizListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32     `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                              // 页号, 从1开始
	PageSize int32     `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                      // 每页返回数量, 最少返回5条
	OpUser   string    `protobuf:"bytes,3,opt,name=opUser,proto3" json:"opUser,omitempty"`                           // 操作人
	Status   BizStatus `protobuf:"varint,4,opt,name=status,proto3,enum=batch_job.BizStatus" json:"status,omitempty"` // 状态 0=正常 1=隐藏
}

func (x *QueryBizListReq) Reset() {
	*x = QueryBizListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBizListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBizListReq) ProtoMessage() {}

func (x *QueryBizListReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBizListReq.ProtoReflect.Descriptor instead.
func (*QueryBizListReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{17}
}

func (x *QueryBizListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryBizListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryBizListReq) GetOpUser() string {
	if x != nil {
		return x.OpUser
	}
	return ""
}

func (x *QueryBizListReq) GetStatus() BizStatus {
	if x != nil {
		return x.Status
	}
	return BizStatus_BizStatus_None
}

type QueryBizListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`       // 总条数
	PageSize int32       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 当前分一页预期返回条数
	Line     []*BizInfoA `protobuf:"bytes,3,rep,name=line,proto3" json:"line,omitempty"`          // 业务信息
}

func (x *QueryBizListRsp) Reset() {
	*x = QueryBizListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBizListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBizListRsp) ProtoMessage() {}

func (x *QueryBizListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBizListRsp.ProtoReflect.Descriptor instead.
func (*QueryBizListRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{18}
}

func (x *QueryBizListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryBizListRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryBizListRsp) GetLine() []*BizInfoA {
	if x != nil {
		return x.Line
	}
	return nil
}

type QueryJobBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id. 必填
}

func (x *QueryJobBaseInfoReq) Reset() {
	*x = QueryJobBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobBaseInfoReq) ProtoMessage() {}

func (x *QueryJobBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobBaseInfoReq.ProtoReflect.Descriptor instead.
func (*QueryJobBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{19}
}

func (x *QueryJobBaseInfoReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type QueryJobBaseInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo *JobBaseInfoA `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"` // 任务基础信息
}

func (x *QueryJobBaseInfoRsp) Reset() {
	*x = QueryJobBaseInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobBaseInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobBaseInfoRsp) ProtoMessage() {}

func (x *QueryJobBaseInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobBaseInfoRsp.ProtoReflect.Descriptor instead.
func (*QueryJobBaseInfoRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{20}
}

func (x *QueryJobBaseInfoRsp) GetBaseInfo() *JobBaseInfoA {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

type QueryJobListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64   `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`    // 开始时间, 秒级时间戳. 0表示不限制
	EndTime   int64   `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`        // 结束时间, 秒级时间戳. 0表示不限制
	OpUser    string  `protobuf:"bytes,3,opt,name=opUser,proto3" json:"opUser,omitempty"`           // 操作人
	BizType   []int32 `protobuf:"varint,4,rep,packed,name=bizType,proto3" json:"bizType,omitempty"` // 业务类型
	Page      int32   `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`              // 页号, 从1开始
	PageSize  int32   `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`      // 每页返回数量, 最少返回5条
}

func (x *QueryJobListReq) Reset() {
	*x = QueryJobListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobListReq) ProtoMessage() {}

func (x *QueryJobListReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobListReq.ProtoReflect.Descriptor instead.
func (*QueryJobListReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{21}
}

func (x *QueryJobListReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *QueryJobListReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *QueryJobListReq) GetOpUser() string {
	if x != nil {
		return x.OpUser
	}
	return ""
}

func (x *QueryJobListReq) GetBizType() []int32 {
	if x != nil {
		return x.BizType
	}
	return nil
}

func (x *QueryJobListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryJobListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryJobListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`       // 总条数
	PageSize int32           `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 当前分一页预期返回条数
	Line     []*JobBaseInfoA `protobuf:"bytes,3,rep,name=line,proto3" json:"line,omitempty"`          // 基础任务信息
}

func (x *QueryJobListRsp) Reset() {
	*x = QueryJobListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobListRsp) ProtoMessage() {}

func (x *QueryJobListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobListRsp.ProtoReflect.Descriptor instead.
func (*QueryJobListRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{22}
}

func (x *QueryJobListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryJobListRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryJobListRsp) GetLine() []*JobBaseInfoA {
	if x != nil {
		return x.Line
	}
	return nil
}

type QueryJobDataLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    int64       `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"`                                // 创建的任务id. 必填
	Page     int32       `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                  // 页号, 从1开始
	PageSize int32       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                          // 每页返回数量, 最少返回5条
	LogType  DataLogType `protobuf:"varint,4,opt,name=logType,proto3,enum=batch_job.DataLogType" json:"logType,omitempty"` // 日志类型
}

func (x *QueryJobDataLogReq) Reset() {
	*x = QueryJobDataLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobDataLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobDataLogReq) ProtoMessage() {}

func (x *QueryJobDataLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobDataLogReq.ProtoReflect.Descriptor instead.
func (*QueryJobDataLogReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{23}
}

func (x *QueryJobDataLogReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *QueryJobDataLogReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryJobDataLogReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryJobDataLogReq) GetLogType() DataLogType {
	if x != nil {
		return x.LogType
	}
	return DataLogType_Debug
}

type QueryJobDataLogRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`       // 总条数
	PageSize int32       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 当前分一页预期返回条数
	Log      []*DataLogA `protobuf:"bytes,3,rep,name=log,proto3" json:"log,omitempty"`            // 日志
}

func (x *QueryJobDataLogRsp) Reset() {
	*x = QueryJobDataLogRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobDataLogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobDataLogRsp) ProtoMessage() {}

func (x *QueryJobDataLogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobDataLogRsp.ProtoReflect.Descriptor instead.
func (*QueryJobDataLogRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{24}
}

func (x *QueryJobDataLogRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryJobDataLogRsp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryJobDataLogRsp) GetLog() []*DataLogA {
	if x != nil {
		return x.Log
	}
	return nil
}

type BizStartJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id. 必填
}

func (x *BizStartJobReq) Reset() {
	*x = BizStartJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizStartJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizStartJobReq) ProtoMessage() {}

func (x *BizStartJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizStartJobReq.ProtoReflect.Descriptor instead.
func (*BizStartJobReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{25}
}

func (x *BizStartJobReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type BizStartJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BizStartJobRsp) Reset() {
	*x = BizStartJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizStartJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizStartJobRsp) ProtoMessage() {}

func (x *BizStartJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizStartJobRsp.ProtoReflect.Descriptor instead.
func (*BizStartJobRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{26}
}

type BizStopJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id. 必填
}

func (x *BizStopJobReq) Reset() {
	*x = BizStopJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizStopJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizStopJobReq) ProtoMessage() {}

func (x *BizStopJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizStopJobReq.ProtoReflect.Descriptor instead.
func (*BizStopJobReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{27}
}

func (x *BizStopJobReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type BizStopJobRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BizStopJobRsp) Reset() {
	*x = BizStopJobRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizStopJobRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizStopJobRsp) ProtoMessage() {}

func (x *BizStopJobRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizStopJobRsp.ProtoReflect.Descriptor instead.
func (*BizStopJobRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{28}
}

type BizUpdateBizDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId            int64  `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"`                       // 创建的任务id. 必填
	BizData          string `protobuf:"bytes,2,opt,name=bizData,proto3" json:"bizData,omitempty"`                    // 业务任务数据, 让业务知道应该做什么. 空值则不会更新这个数据
	BizProcessData   string `protobuf:"bytes,3,opt,name=bizProcessData,proto3" json:"bizProcessData,omitempty"`      // 业务中需要处理的批量数据. 空值则不会更新这个数据
	ProcessDataTotal int64  `protobuf:"varint,4,opt,name=processDataTotal,proto3" json:"processDataTotal,omitempty"` // 需要处理数据总数. 空值则不会更新这个数据
	ProcessedNum     int64  `protobuf:"varint,5,opt,name=processedNum,proto3" json:"processedNum,omitempty"`         // 已处理过的数据量, 无论成功还是失败. 空值则不会更新这个数据
}

func (x *BizUpdateBizDataReq) Reset() {
	*x = BizUpdateBizDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizUpdateBizDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizUpdateBizDataReq) ProtoMessage() {}

func (x *BizUpdateBizDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizUpdateBizDataReq.ProtoReflect.Descriptor instead.
func (*BizUpdateBizDataReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{29}
}

func (x *BizUpdateBizDataReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *BizUpdateBizDataReq) GetBizData() string {
	if x != nil {
		return x.BizData
	}
	return ""
}

func (x *BizUpdateBizDataReq) GetBizProcessData() string {
	if x != nil {
		return x.BizProcessData
	}
	return ""
}

func (x *BizUpdateBizDataReq) GetProcessDataTotal() int64 {
	if x != nil {
		return x.ProcessDataTotal
	}
	return 0
}

func (x *BizUpdateBizDataReq) GetProcessedNum() int64 {
	if x != nil {
		return x.ProcessedNum
	}
	return 0
}

type BizUpdateBizDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BizUpdateBizDataRsp) Reset() {
	*x = BizUpdateBizDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizUpdateBizDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizUpdateBizDataRsp) ProtoMessage() {}

func (x *BizUpdateBizDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizUpdateBizDataRsp.ProtoReflect.Descriptor instead.
func (*BizUpdateBizDataRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{30}
}

type BizIncrProcessedNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id. 必填
	Num   int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`     // 增加数量. 必填
}

func (x *BizIncrProcessedNumReq) Reset() {
	*x = BizIncrProcessedNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizIncrProcessedNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizIncrProcessedNumReq) ProtoMessage() {}

func (x *BizIncrProcessedNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizIncrProcessedNumReq.ProtoReflect.Descriptor instead.
func (*BizIncrProcessedNumReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{31}
}

func (x *BizIncrProcessedNumReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *BizIncrProcessedNumReq) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type BizIncrProcessedNumRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BizIncrProcessedNumRsp) Reset() {
	*x = BizIncrProcessedNumRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizIncrProcessedNumRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizIncrProcessedNumRsp) ProtoMessage() {}

func (x *BizIncrProcessedNumRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizIncrProcessedNumRsp.ProtoReflect.Descriptor instead.
func (*BizIncrProcessedNumRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{32}
}

type BizAddDataLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64       `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"` // 创建的任务id. 必填
	Log   []*DataLogQ `protobuf:"bytes,2,rep,name=log,proto3" json:"log,omitempty"`      // 日志内容
}

func (x *BizAddDataLogReq) Reset() {
	*x = BizAddDataLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizAddDataLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizAddDataLogReq) ProtoMessage() {}

func (x *BizAddDataLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizAddDataLogReq.ProtoReflect.Descriptor instead.
func (*BizAddDataLogReq) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{33}
}

func (x *BizAddDataLogReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *BizAddDataLogReq) GetLog() []*DataLogQ {
	if x != nil {
		return x.Log
	}
	return nil
}

type BizAddDataLogRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BizAddDataLogRsp) Reset() {
	*x = BizAddDataLogRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_job_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizAddDataLogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizAddDataLogRsp) ProtoMessage() {}

func (x *BizAddDataLogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_batch_job_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizAddDataLogRsp.ProtoReflect.Descriptor instead.
func (*BizAddDataLogRsp) Descriptor() ([]byte, []int) {
	return file_batch_job_proto_rawDescGZIP(), []int{34}
}

var File_batch_job_proto protoreflect.FileDescriptor

var file_batch_job_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xea, 0x05, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07, 0x62,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x63, 0x62,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52,
	0x0e, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x0b, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0x88, 0x01,
	0x01, 0x52, 0x0b, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x26,
	0x0a, 0x09, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x09, 0x63, 0x62, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0x88, 0x01, 0x01, 0x52, 0x0d, 0x63, 0x62, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x15, 0x63, 0x62, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x15, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x62, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x12, 0x63,
	0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x33, 0x0a, 0x10, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x10, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x14, 0x63,
	0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f,
	0x62, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x12, 0x22,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42,
	0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x15, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x42, 0x69, 0x7a, 0x52, 0x73, 0x70, 0x22, 0x7d, 0x0a, 0x07, 0x4f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x51, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x95, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5c,
	0x0a, 0x0d, 0x42, 0x69, 0x7a, 0x4f, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x12,
	0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69,
	0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf8, 0x04, 0x0a,
	0x08, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6a, 0x6f, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x62,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x62,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x4e, 0x75, 0x6d,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x51, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x6f, 0x67, 0x41, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00,
	0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x7a,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4e, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4e, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x51, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x29, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0x55, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x51, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x22, 0x54, 0x0a,
	0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x52,
	0x02, 0x6f, 0x70, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x22, 0x5a, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07, 0x62, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x20, 0x00, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6e, 0x65, 0x65, 0x64, 0x4f, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x4f, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0x3a, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e,
	0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x99,
	0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x34, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x18, 0x01, 0x22, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x70, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x25, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f,
	0x67, 0x41, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x2f, 0x0a, 0x0e, 0x42, 0x69, 0x7a, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x42, 0x69, 0x7a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x22, 0x2e, 0x0a, 0x0d, 0x42, 0x69,
	0x7a, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x20, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x42, 0x69,
	0x7a, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x22, 0xc6, 0x01, 0x0a, 0x13,
	0x42, 0x69, 0x7a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x22, 0x15, 0x0a, 0x13, 0x42, 0x69, 0x7a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22, 0x52, 0x0a, 0x16, 0x42,
	0x69, 0x7a, 0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0x18, 0x0a, 0x16, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x58, 0x0a, 0x10, 0x42, 0x69, 0x7a,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x51, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x69, 0x7a, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x6f, 0x67, 0x52, 0x73, 0x70, 0x2a, 0x3c, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x48, 0x74, 0x74, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x2a,
	0x35, 0x0a, 0x09, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x10, 0x01, 0x2a, 0x5e, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x61, 0x69, 0x74, 0x42, 0x69, 0x7a, 0x52, 0x75, 0x6e, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x35, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x61,
	0x72, 0x6e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x10, 0x03, 0x32, 0xbf, 0x0d,
	0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x79, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x42, 0x69, 0x7a, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f,
	0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42,
	0x69, 0x7a, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f,
	0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42,
	0x69, 0x7a, 0x52, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x22, 0x1a, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x12, 0x75, 0x0a, 0x0e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x7a, 0x12, 0x1e,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x52, 0x73, 0x70, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x69, 0x7a, 0x12, 0x71, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f,
	0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x73,
	0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x6d, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6a, 0x6f, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x73,
	0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x69, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f,
	0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x2f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62,
	0x12, 0x69, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69,
	0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x7a,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x7a, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x69, 0x7a, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x2f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x69, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x12,
	0x1d, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x73, 0x70, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x2f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x6f, 0x67, 0x12, 0x65, 0x0a, 0x0b, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a,
	0x6f, 0x62, 0x12, 0x19, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42,
	0x69, 0x7a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x42,
	0x69, 0x7a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x61, 0x0a, 0x0a, 0x42, 0x69,
	0x7a, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42,
	0x69, 0x7a, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x2f, 0x42, 0x69, 0x7a, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x79, 0x0a,
	0x10, 0x42, 0x69, 0x7a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69,
	0x7a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69,
	0x7a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73,
	0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x42, 0x69, 0x7a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x7a,
	0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x12, 0x21, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69, 0x7a,
	0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e,
	0x42, 0x69, 0x7a, 0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x4e, 0x75, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01,
	0x2a, 0x22, 0x1d, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x2f, 0x42, 0x69, 0x7a,
	0x49, 0x6e, 0x63, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x12, 0x6d, 0x0a, 0x0d, 0x42, 0x69, 0x7a, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f,
	0x67, 0x12, 0x1b, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69,
	0x7a, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x69, 0x7a, 0x41, 0x64,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x2f, 0x42, 0x69, 0x7a, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x42,
	0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6c,
	0x79, 0x75, 0x61, 0x6e, 0x63, 0x6e, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6a, 0x6f, 0x62,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_batch_job_proto_rawDescOnce sync.Once
	file_batch_job_proto_rawDescData = file_batch_job_proto_rawDesc
)

func file_batch_job_proto_rawDescGZIP() []byte {
	file_batch_job_proto_rawDescOnce.Do(func() {
		file_batch_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_batch_job_proto_rawDescData)
	})
	return file_batch_job_proto_rawDescData
}

var file_batch_job_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_batch_job_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_batch_job_proto_goTypes = []interface{}{
	(RateType)(0),                  // 0: batch_job.RateType
	(ExecType)(0),                  // 1: batch_job.ExecType
	(BizStatus)(0),                 // 2: batch_job.BizStatus
	(JobStatus)(0),                 // 3: batch_job.JobStatus
	(DataLogType)(0),               // 4: batch_job.DataLogType
	(*AdminRegistryBizReq)(nil),    // 5: batch_job.AdminRegistryBizReq
	(*AdminRegistryBizRsp)(nil),    // 6: batch_job.AdminRegistryBizRsp
	(*OpInfoQ)(nil),                // 7: batch_job.OpInfoQ
	(*OpInfoA)(nil),                // 8: batch_job.OpInfoA
	(*BizOpHistoryA)(nil),          // 9: batch_job.BizOpHistoryA
	(*BizInfoA)(nil),               // 10: batch_job.BizInfoA
	(*JobBaseInfoA)(nil),           // 11: batch_job.JobBaseInfoA
	(*DataLogQ)(nil),               // 12: batch_job.DataLogQ
	(*DataLogA)(nil),               // 13: batch_job.DataLogA
	(*AdminCreateJobReq)(nil),      // 14: batch_job.AdminCreateJobReq
	(*AdminCreateJobRsp)(nil),      // 15: batch_job.AdminCreateJobRsp
	(*AdminStartJobReq)(nil),       // 16: batch_job.AdminStartJobReq
	(*AdminStartJobRsp)(nil),       // 17: batch_job.AdminStartJobRsp
	(*AdminStopJobReq)(nil),        // 18: batch_job.AdminStopJobReq
	(*AdminStopJobRsp)(nil),        // 19: batch_job.AdminStopJobRsp
	(*QueryBizInfoReq)(nil),        // 20: batch_job.QueryBizInfoReq
	(*QueryBizInfoRsp)(nil),        // 21: batch_job.QueryBizInfoRsp
	(*QueryBizListReq)(nil),        // 22: batch_job.QueryBizListReq
	(*QueryBizListRsp)(nil),        // 23: batch_job.QueryBizListRsp
	(*QueryJobBaseInfoReq)(nil),    // 24: batch_job.QueryJobBaseInfoReq
	(*QueryJobBaseInfoRsp)(nil),    // 25: batch_job.QueryJobBaseInfoRsp
	(*QueryJobListReq)(nil),        // 26: batch_job.QueryJobListReq
	(*QueryJobListRsp)(nil),        // 27: batch_job.QueryJobListRsp
	(*QueryJobDataLogReq)(nil),     // 28: batch_job.QueryJobDataLogReq
	(*QueryJobDataLogRsp)(nil),     // 29: batch_job.QueryJobDataLogRsp
	(*BizStartJobReq)(nil),         // 30: batch_job.BizStartJobReq
	(*BizStartJobRsp)(nil),         // 31: batch_job.BizStartJobRsp
	(*BizStopJobReq)(nil),          // 32: batch_job.BizStopJobReq
	(*BizStopJobRsp)(nil),          // 33: batch_job.BizStopJobRsp
	(*BizUpdateBizDataReq)(nil),    // 34: batch_job.BizUpdateBizDataReq
	(*BizUpdateBizDataRsp)(nil),    // 35: batch_job.BizUpdateBizDataRsp
	(*BizIncrProcessedNumReq)(nil), // 36: batch_job.BizIncrProcessedNumReq
	(*BizIncrProcessedNumRsp)(nil), // 37: batch_job.BizIncrProcessedNumRsp
	(*BizAddDataLogReq)(nil),       // 38: batch_job.BizAddDataLogReq
	(*BizAddDataLogRsp)(nil),       // 39: batch_job.BizAddDataLogRsp
}
var file_batch_job_proto_depIdxs = []int32{
	1,  // 0: batch_job.AdminRegistryBizReq.execType:type_name -> batch_job.ExecType
	0,  // 1: batch_job.AdminRegistryBizReq.rateType:type_name -> batch_job.RateType
	7,  // 2: batch_job.AdminRegistryBizReq.op:type_name -> batch_job.OpInfoQ
	2,  // 3: batch_job.AdminRegistryBizReq.status:type_name -> batch_job.BizStatus
	8,  // 4: batch_job.BizOpHistoryA.op:type_name -> batch_job.OpInfoA
	10, // 5: batch_job.BizOpHistoryA.info:type_name -> batch_job.BizInfoA
	1,  // 6: batch_job.BizInfoA.execType:type_name -> batch_job.ExecType
	0,  // 7: batch_job.BizInfoA.rateType:type_name -> batch_job.RateType
	8,  // 8: batch_job.BizInfoA.op:type_name -> batch_job.OpInfoA
	2,  // 9: batch_job.BizInfoA.status:type_name -> batch_job.BizStatus
	3,  // 10: batch_job.JobBaseInfoA.status:type_name -> batch_job.JobStatus
	8,  // 11: batch_job.JobBaseInfoA.op:type_name -> batch_job.OpInfoA
	4,  // 12: batch_job.DataLogQ.logType:type_name -> batch_job.DataLogType
	4,  // 13: batch_job.DataLogA.logType:type_name -> batch_job.DataLogType
	7,  // 14: batch_job.AdminCreateJobReq.op:type_name -> batch_job.OpInfoQ
	7,  // 15: batch_job.AdminStartJobReq.op:type_name -> batch_job.OpInfoQ
	7,  // 16: batch_job.AdminStopJobReq.op:type_name -> batch_job.OpInfoQ
	10, // 17: batch_job.QueryBizInfoRsp.line:type_name -> batch_job.BizInfoA
	2,  // 18: batch_job.QueryBizListReq.status:type_name -> batch_job.BizStatus
	10, // 19: batch_job.QueryBizListRsp.line:type_name -> batch_job.BizInfoA
	11, // 20: batch_job.QueryJobBaseInfoRsp.baseInfo:type_name -> batch_job.JobBaseInfoA
	11, // 21: batch_job.QueryJobListRsp.line:type_name -> batch_job.JobBaseInfoA
	4,  // 22: batch_job.QueryJobDataLogReq.logType:type_name -> batch_job.DataLogType
	13, // 23: batch_job.QueryJobDataLogRsp.log:type_name -> batch_job.DataLogA
	12, // 24: batch_job.BizAddDataLogReq.log:type_name -> batch_job.DataLogQ
	5,  // 25: batch_job.BatchJobService.AdminRegistryBiz:input_type -> batch_job.AdminRegistryBizReq
	5,  // 26: batch_job.BatchJobService.AdminChangeBiz:input_type -> batch_job.AdminRegistryBizReq
	14, // 27: batch_job.BatchJobService.AdminCreateJob:input_type -> batch_job.AdminCreateJobReq
	16, // 28: batch_job.BatchJobService.AdminStartJob:input_type -> batch_job.AdminStartJobReq
	18, // 29: batch_job.BatchJobService.AdminStopJob:input_type -> batch_job.AdminStopJobReq
	20, // 30: batch_job.BatchJobService.QueryBizInfo:input_type -> batch_job.QueryBizInfoReq
	22, // 31: batch_job.BatchJobService.QueryBizList:input_type -> batch_job.QueryBizListReq
	24, // 32: batch_job.BatchJobService.QueryJobBaseInfo:input_type -> batch_job.QueryJobBaseInfoReq
	26, // 33: batch_job.BatchJobService.QueryJobList:input_type -> batch_job.QueryJobListReq
	28, // 34: batch_job.BatchJobService.QueryJobDataLog:input_type -> batch_job.QueryJobDataLogReq
	30, // 35: batch_job.BatchJobService.BizStartJob:input_type -> batch_job.BizStartJobReq
	32, // 36: batch_job.BatchJobService.BizStopJob:input_type -> batch_job.BizStopJobReq
	34, // 37: batch_job.BatchJobService.BizUpdateBizData:input_type -> batch_job.BizUpdateBizDataReq
	36, // 38: batch_job.BatchJobService.BizIncrProcessedNum:input_type -> batch_job.BizIncrProcessedNumReq
	38, // 39: batch_job.BatchJobService.BizAddDataLog:input_type -> batch_job.BizAddDataLogReq
	6,  // 40: batch_job.BatchJobService.AdminRegistryBiz:output_type -> batch_job.AdminRegistryBizRsp
	6,  // 41: batch_job.BatchJobService.AdminChangeBiz:output_type -> batch_job.AdminRegistryBizRsp
	15, // 42: batch_job.BatchJobService.AdminCreateJob:output_type -> batch_job.AdminCreateJobRsp
	17, // 43: batch_job.BatchJobService.AdminStartJob:output_type -> batch_job.AdminStartJobRsp
	19, // 44: batch_job.BatchJobService.AdminStopJob:output_type -> batch_job.AdminStopJobRsp
	21, // 45: batch_job.BatchJobService.QueryBizInfo:output_type -> batch_job.QueryBizInfoRsp
	23, // 46: batch_job.BatchJobService.QueryBizList:output_type -> batch_job.QueryBizListRsp
	25, // 47: batch_job.BatchJobService.QueryJobBaseInfo:output_type -> batch_job.QueryJobBaseInfoRsp
	27, // 48: batch_job.BatchJobService.QueryJobList:output_type -> batch_job.QueryJobListRsp
	29, // 49: batch_job.BatchJobService.QueryJobDataLog:output_type -> batch_job.QueryJobDataLogRsp
	31, // 50: batch_job.BatchJobService.BizStartJob:output_type -> batch_job.BizStartJobRsp
	33, // 51: batch_job.BatchJobService.BizStopJob:output_type -> batch_job.BizStopJobRsp
	35, // 52: batch_job.BatchJobService.BizUpdateBizData:output_type -> batch_job.BizUpdateBizDataRsp
	37, // 53: batch_job.BatchJobService.BizIncrProcessedNum:output_type -> batch_job.BizIncrProcessedNumRsp
	39, // 54: batch_job.BatchJobService.BizAddDataLog:output_type -> batch_job.BizAddDataLogRsp
	40, // [40:55] is the sub-list for method output_type
	25, // [25:40] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_batch_job_proto_init() }
func file_batch_job_proto_init() {
	if File_batch_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_batch_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRegistryBizReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRegistryBizRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpInfoQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpInfoA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizOpHistoryA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizInfoA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobBaseInfoA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLogQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLogA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminStartJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminStartJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminStopJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminStopJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBizInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBizInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBizListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBizListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobBaseInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobDataLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobDataLogRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizStartJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizStartJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizStopJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizStopJobRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizUpdateBizDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizUpdateBizDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizIncrProcessedNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizIncrProcessedNumRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizAddDataLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_job_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizAddDataLogRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_batch_job_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_batch_job_proto_goTypes,
		DependencyIndexes: file_batch_job_proto_depIdxs,
		EnumInfos:         file_batch_job_proto_enumTypes,
		MessageInfos:      file_batch_job_proto_msgTypes,
	}.Build()
	File_batch_job_proto = out.File
	file_batch_job_proto_rawDesc = nil
	file_batch_job_proto_goTypes = nil
	file_batch_job_proto_depIdxs = nil
}
