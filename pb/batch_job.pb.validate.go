// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: batch_job.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExecExtendDataQ with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExecExtendDataQ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecExtendDataQ with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecExtendDataQMultiError, or nil if none found.
func (m *ExecExtendDataQ) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecExtendDataQ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttpCallback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecExtendDataQValidationError{
					field:  "HttpCallback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecExtendDataQValidationError{
					field:  "HttpCallback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpCallback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecExtendDataQValidationError{
				field:  "HttpCallback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecExtendDataQMultiError(errors)
	}

	return nil
}

// ExecExtendDataQMultiError is an error wrapping multiple validation errors
// returned by ExecExtendDataQ.ValidateAll() if the designated constraints
// aren't met.
type ExecExtendDataQMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecExtendDataQMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecExtendDataQMultiError) AllErrors() []error { return m }

// ExecExtendDataQValidationError is the validation error returned by
// ExecExtendDataQ.Validate if the designated constraints aren't met.
type ExecExtendDataQValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecExtendDataQValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecExtendDataQValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecExtendDataQValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecExtendDataQValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecExtendDataQValidationError) ErrorName() string { return "ExecExtendDataQValidationError" }

// Error satisfies the builtin error interface
func (e ExecExtendDataQValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecExtendDataQ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecExtendDataQValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecExtendDataQValidationError{}

// Validate checks the field values on ExecExtendDataHttpCallbackQ with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecExtendDataHttpCallbackQ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecExtendDataHttpCallbackQ with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecExtendDataHttpCallbackQMultiError, or nil if none found.
func (m *ExecExtendDataHttpCallbackQ) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecExtendDataHttpCallbackQ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCbBeforeCreate() != "" {

		if uri, err := url.Parse(m.GetCbBeforeCreate()); err != nil {
			err = ExecExtendDataHttpCallbackQValidationError{
				field:  "CbBeforeCreate",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := ExecExtendDataHttpCallbackQValidationError{
				field:  "CbBeforeCreate",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCbBeforeRun() != "" {

		if uri, err := url.Parse(m.GetCbBeforeRun()); err != nil {
			err = ExecExtendDataHttpCallbackQValidationError{
				field:  "CbBeforeRun",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := ExecExtendDataHttpCallbackQValidationError{
				field:  "CbBeforeRun",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if uri, err := url.Parse(m.GetCbProcess()); err != nil {
		err = ExecExtendDataHttpCallbackQValidationError{
			field:  "CbProcess",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ExecExtendDataHttpCallbackQValidationError{
			field:  "CbProcess",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbProcessStop() != "" {

		if uri, err := url.Parse(m.GetCbProcessStop()); err != nil {
			err = ExecExtendDataHttpCallbackQValidationError{
				field:  "CbProcessStop",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := ExecExtendDataHttpCallbackQValidationError{
				field:  "CbProcessStop",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCbBeforeCreateTimeout() < 0 {
		err := ExecExtendDataHttpCallbackQValidationError{
			field:  "CbBeforeCreateTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbBeforeRunTimeout() < 0 {
		err := ExecExtendDataHttpCallbackQValidationError{
			field:  "CbBeforeRunTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbProcessTimeout() < 0 {
		err := ExecExtendDataHttpCallbackQValidationError{
			field:  "CbProcessTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbProcessStopTimeout() < 0 {
		err := ExecExtendDataHttpCallbackQValidationError{
			field:  "CbProcessStopTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExecExtendDataHttpCallbackQMultiError(errors)
	}

	return nil
}

// ExecExtendDataHttpCallbackQMultiError is an error wrapping multiple
// validation errors returned by ExecExtendDataHttpCallbackQ.ValidateAll() if
// the designated constraints aren't met.
type ExecExtendDataHttpCallbackQMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecExtendDataHttpCallbackQMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecExtendDataHttpCallbackQMultiError) AllErrors() []error { return m }

// ExecExtendDataHttpCallbackQValidationError is the validation error returned
// by ExecExtendDataHttpCallbackQ.Validate if the designated constraints
// aren't met.
type ExecExtendDataHttpCallbackQValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecExtendDataHttpCallbackQValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecExtendDataHttpCallbackQValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecExtendDataHttpCallbackQValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecExtendDataHttpCallbackQValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecExtendDataHttpCallbackQValidationError) ErrorName() string {
	return "ExecExtendDataHttpCallbackQValidationError"
}

// Error satisfies the builtin error interface
func (e ExecExtendDataHttpCallbackQValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecExtendDataHttpCallbackQ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecExtendDataHttpCallbackQValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecExtendDataHttpCallbackQValidationError{}

// Validate checks the field values on ExecExtendDataA with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExecExtendDataA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecExtendDataA with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecExtendDataAMultiError, or nil if none found.
func (m *ExecExtendDataA) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecExtendDataA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttpCallback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecExtendDataAValidationError{
					field:  "HttpCallback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecExtendDataAValidationError{
					field:  "HttpCallback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpCallback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecExtendDataAValidationError{
				field:  "HttpCallback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecExtendDataAMultiError(errors)
	}

	return nil
}

// ExecExtendDataAMultiError is an error wrapping multiple validation errors
// returned by ExecExtendDataA.ValidateAll() if the designated constraints
// aren't met.
type ExecExtendDataAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecExtendDataAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecExtendDataAMultiError) AllErrors() []error { return m }

// ExecExtendDataAValidationError is the validation error returned by
// ExecExtendDataA.Validate if the designated constraints aren't met.
type ExecExtendDataAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecExtendDataAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecExtendDataAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecExtendDataAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecExtendDataAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecExtendDataAValidationError) ErrorName() string { return "ExecExtendDataAValidationError" }

// Error satisfies the builtin error interface
func (e ExecExtendDataAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecExtendDataA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecExtendDataAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecExtendDataAValidationError{}

// Validate checks the field values on ExecExtendDataHttpCallbackA with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecExtendDataHttpCallbackA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecExtendDataHttpCallbackA with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecExtendDataHttpCallbackAMultiError, or nil if none found.
func (m *ExecExtendDataHttpCallbackA) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecExtendDataHttpCallbackA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CbBeforeCreate

	// no validation rules for CbBeforeRun

	// no validation rules for CbProcess

	// no validation rules for CbProcessStop

	// no validation rules for CbBeforeCreateTimeout

	// no validation rules for CbBeforeRunTimeout

	// no validation rules for CbProcessTimeout

	// no validation rules for CbProcessStopTimeout

	if len(errors) > 0 {
		return ExecExtendDataHttpCallbackAMultiError(errors)
	}

	return nil
}

// ExecExtendDataHttpCallbackAMultiError is an error wrapping multiple
// validation errors returned by ExecExtendDataHttpCallbackA.ValidateAll() if
// the designated constraints aren't met.
type ExecExtendDataHttpCallbackAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecExtendDataHttpCallbackAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecExtendDataHttpCallbackAMultiError) AllErrors() []error { return m }

// ExecExtendDataHttpCallbackAValidationError is the validation error returned
// by ExecExtendDataHttpCallbackA.Validate if the designated constraints
// aren't met.
type ExecExtendDataHttpCallbackAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecExtendDataHttpCallbackAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecExtendDataHttpCallbackAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecExtendDataHttpCallbackAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecExtendDataHttpCallbackAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecExtendDataHttpCallbackAValidationError) ErrorName() string {
	return "ExecExtendDataHttpCallbackAValidationError"
}

// Error satisfies the builtin error interface
func (e ExecExtendDataHttpCallbackAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecExtendDataHttpCallbackA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecExtendDataHttpCallbackAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecExtendDataHttpCallbackAValidationError{}

// Validate checks the field values on AdminRegistryBizReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRegistryBizReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRegistryBizReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRegistryBizReqMultiError, or nil if none found.
func (m *AdminRegistryBizReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRegistryBizReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBizName()) < 1 {
		err := AdminRegistryBizReqValidationError{
			field:  "BizName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	// no validation rules for ExecType

	if all {
		switch v := interface{}(m.GetExecExtendData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminRegistryBizReqValidationError{
					field:  "ExecExtendData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminRegistryBizReqValidationError{
					field:  "ExecExtendData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecExtendData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminRegistryBizReqValidationError{
				field:  "ExecExtendData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminRegistryBizReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminRegistryBizReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminRegistryBizReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return AdminRegistryBizReqMultiError(errors)
	}

	return nil
}

// AdminRegistryBizReqMultiError is an error wrapping multiple validation
// errors returned by AdminRegistryBizReq.ValidateAll() if the designated
// constraints aren't met.
type AdminRegistryBizReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRegistryBizReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRegistryBizReqMultiError) AllErrors() []error { return m }

// AdminRegistryBizReqValidationError is the validation error returned by
// AdminRegistryBizReq.Validate if the designated constraints aren't met.
type AdminRegistryBizReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRegistryBizReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRegistryBizReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRegistryBizReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRegistryBizReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRegistryBizReqValidationError) ErrorName() string {
	return "AdminRegistryBizReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRegistryBizReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRegistryBizReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRegistryBizReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRegistryBizReqValidationError{}

// Validate checks the field values on AdminRegistryBizRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRegistryBizRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRegistryBizRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRegistryBizRspMultiError, or nil if none found.
func (m *AdminRegistryBizRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRegistryBizRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	if len(errors) > 0 {
		return AdminRegistryBizRspMultiError(errors)
	}

	return nil
}

// AdminRegistryBizRspMultiError is an error wrapping multiple validation
// errors returned by AdminRegistryBizRsp.ValidateAll() if the designated
// constraints aren't met.
type AdminRegistryBizRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRegistryBizRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRegistryBizRspMultiError) AllErrors() []error { return m }

// AdminRegistryBizRspValidationError is the validation error returned by
// AdminRegistryBizRsp.Validate if the designated constraints aren't met.
type AdminRegistryBizRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRegistryBizRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRegistryBizRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRegistryBizRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRegistryBizRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRegistryBizRspValidationError) ErrorName() string {
	return "AdminRegistryBizRspValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRegistryBizRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRegistryBizRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRegistryBizRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRegistryBizRspValidationError{}

// Validate checks the field values on AdminUpdateBizReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateBizReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateBizReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateBizReqMultiError, or nil if none found.
func (m *AdminUpdateBizReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateBizReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBizId() <= 0 {
		err := AdminUpdateBizReqValidationError{
			field:  "BizId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizName()) < 1 {
		err := AdminUpdateBizReqValidationError{
			field:  "BizName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	// no validation rules for ExecType

	if all {
		switch v := interface{}(m.GetExecExtendData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateBizReqValidationError{
					field:  "ExecExtendData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateBizReqValidationError{
					field:  "ExecExtendData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecExtendData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateBizReqValidationError{
				field:  "ExecExtendData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateBizReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateBizReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateBizReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return AdminUpdateBizReqMultiError(errors)
	}

	return nil
}

// AdminUpdateBizReqMultiError is an error wrapping multiple validation errors
// returned by AdminUpdateBizReq.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdateBizReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateBizReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateBizReqMultiError) AllErrors() []error { return m }

// AdminUpdateBizReqValidationError is the validation error returned by
// AdminUpdateBizReq.Validate if the designated constraints aren't met.
type AdminUpdateBizReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateBizReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateBizReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateBizReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateBizReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateBizReqValidationError) ErrorName() string {
	return "AdminUpdateBizReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateBizReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateBizReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateBizReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateBizReqValidationError{}

// Validate checks the field values on AdminUpdateBizRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateBizRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateBizRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateBizRspMultiError, or nil if none found.
func (m *AdminUpdateBizRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateBizRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminUpdateBizRspMultiError(errors)
	}

	return nil
}

// AdminUpdateBizRspMultiError is an error wrapping multiple validation errors
// returned by AdminUpdateBizRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdateBizRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateBizRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateBizRspMultiError) AllErrors() []error { return m }

// AdminUpdateBizRspValidationError is the validation error returned by
// AdminUpdateBizRsp.Validate if the designated constraints aren't met.
type AdminUpdateBizRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateBizRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateBizRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateBizRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateBizRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateBizRspValidationError) ErrorName() string {
	return "AdminUpdateBizRspValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateBizRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateBizRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateBizRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateBizRspValidationError{}

// Validate checks the field values on OpInfoQ with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpInfoQ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpInfoQ with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpInfoQMultiError, or nil if none found.
func (m *OpInfoQ) ValidateAll() error {
	return m.validate(true)
}

func (m *OpInfoQ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpSource

	// no validation rules for OpUserid

	// no validation rules for OpUserName

	// no validation rules for OpRemark

	if len(errors) > 0 {
		return OpInfoQMultiError(errors)
	}

	return nil
}

// OpInfoQMultiError is an error wrapping multiple validation errors returned
// by OpInfoQ.ValidateAll() if the designated constraints aren't met.
type OpInfoQMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpInfoQMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpInfoQMultiError) AllErrors() []error { return m }

// OpInfoQValidationError is the validation error returned by OpInfoQ.Validate
// if the designated constraints aren't met.
type OpInfoQValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpInfoQValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpInfoQValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpInfoQValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpInfoQValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpInfoQValidationError) ErrorName() string { return "OpInfoQValidationError" }

// Error satisfies the builtin error interface
func (e OpInfoQValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpInfoQ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpInfoQValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpInfoQValidationError{}

// Validate checks the field values on OpInfoA with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpInfoA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpInfoA with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpInfoAMultiError, or nil if none found.
func (m *OpInfoA) ValidateAll() error {
	return m.validate(true)
}

func (m *OpInfoA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpSource

	// no validation rules for OpUserid

	// no validation rules for OpUserName

	// no validation rules for OpRemark

	// no validation rules for OpTime

	if len(errors) > 0 {
		return OpInfoAMultiError(errors)
	}

	return nil
}

// OpInfoAMultiError is an error wrapping multiple validation errors returned
// by OpInfoA.ValidateAll() if the designated constraints aren't met.
type OpInfoAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpInfoAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpInfoAMultiError) AllErrors() []error { return m }

// OpInfoAValidationError is the validation error returned by OpInfoA.Validate
// if the designated constraints aren't met.
type OpInfoAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpInfoAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpInfoAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpInfoAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpInfoAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpInfoAValidationError) ErrorName() string { return "OpInfoAValidationError" }

// Error satisfies the builtin error interface
func (e OpInfoAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpInfoA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpInfoAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpInfoAValidationError{}

// Validate checks the field values on BizOpHistoryA with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizOpHistoryA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizOpHistoryA with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizOpHistoryAMultiError, or
// nil if none found.
func (m *BizOpHistoryA) ValidateAll() error {
	return m.validate(true)
}

func (m *BizOpHistoryA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizOpHistoryAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizOpHistoryAValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BizOpHistoryAMultiError(errors)
	}

	return nil
}

// BizOpHistoryAMultiError is an error wrapping multiple validation errors
// returned by BizOpHistoryA.ValidateAll() if the designated constraints
// aren't met.
type BizOpHistoryAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizOpHistoryAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizOpHistoryAMultiError) AllErrors() []error { return m }

// BizOpHistoryAValidationError is the validation error returned by
// BizOpHistoryA.Validate if the designated constraints aren't met.
type BizOpHistoryAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizOpHistoryAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizOpHistoryAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizOpHistoryAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizOpHistoryAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizOpHistoryAValidationError) ErrorName() string { return "BizOpHistoryAValidationError" }

// Error satisfies the builtin error interface
func (e BizOpHistoryAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizOpHistoryA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizOpHistoryAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizOpHistoryAValidationError{}

// Validate checks the field values on BizInfoA with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizInfoA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizInfoA with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizInfoAMultiError, or nil
// if none found.
func (m *BizInfoA) ValidateAll() error {
	return m.validate(true)
}

func (m *BizInfoA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for BizName

	// no validation rules for Remark

	// no validation rules for ExecType

	if all {
		switch v := interface{}(m.GetExecExtendData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizInfoAValidationError{
					field:  "ExecExtendData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizInfoAValidationError{
					field:  "ExecExtendData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecExtendData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizInfoAValidationError{
				field:  "ExecExtendData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizInfoAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return BizInfoAMultiError(errors)
	}

	return nil
}

// BizInfoAMultiError is an error wrapping multiple validation errors returned
// by BizInfoA.ValidateAll() if the designated constraints aren't met.
type BizInfoAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizInfoAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizInfoAMultiError) AllErrors() []error { return m }

// BizInfoAValidationError is the validation error returned by
// BizInfoA.Validate if the designated constraints aren't met.
type BizInfoAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizInfoAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizInfoAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizInfoAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizInfoAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizInfoAValidationError) ErrorName() string { return "BizInfoAValidationError" }

// Error satisfies the builtin error interface
func (e BizInfoAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizInfoA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizInfoAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizInfoAValidationError{}

// Validate checks the field values on BizInfoByListA with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizInfoByListA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizInfoByListA with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizInfoByListAMultiError,
// or nil if none found.
func (m *BizInfoByListA) ValidateAll() error {
	return m.validate(true)
}

func (m *BizInfoByListA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for BizName

	// no validation rules for Remark

	// no validation rules for ExecType

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizInfoByListAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizInfoByListAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizInfoByListAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return BizInfoByListAMultiError(errors)
	}

	return nil
}

// BizInfoByListAMultiError is an error wrapping multiple validation errors
// returned by BizInfoByListA.ValidateAll() if the designated constraints
// aren't met.
type BizInfoByListAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizInfoByListAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizInfoByListAMultiError) AllErrors() []error { return m }

// BizInfoByListAValidationError is the validation error returned by
// BizInfoByListA.Validate if the designated constraints aren't met.
type BizInfoByListAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizInfoByListAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizInfoByListAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizInfoByListAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizInfoByListAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizInfoByListAValidationError) ErrorName() string { return "BizInfoByListAValidationError" }

// Error satisfies the builtin error interface
func (e BizInfoByListAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizInfoByListA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizInfoByListAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizInfoByListAValidationError{}

// Validate checks the field values on JobInfoA with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobInfoA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobInfoA with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobInfoAMultiError, or nil
// if none found.
func (m *JobInfoA) ValidateAll() error {
	return m.validate(true)
}

func (m *JobInfoA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for JobName

	// no validation rules for BizId

	// no validation rules for JobData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for ErrLogCount

	// no validation rules for Status

	// no validation rules for CreateTime

	// no validation rules for RateType

	// no validation rules for RateSec

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	if len(errors) > 0 {
		return JobInfoAMultiError(errors)
	}

	return nil
}

// JobInfoAMultiError is an error wrapping multiple validation errors returned
// by JobInfoA.ValidateAll() if the designated constraints aren't met.
type JobInfoAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobInfoAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobInfoAMultiError) AllErrors() []error { return m }

// JobInfoAValidationError is the validation error returned by
// JobInfoA.Validate if the designated constraints aren't met.
type JobInfoAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobInfoAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobInfoAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobInfoAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobInfoAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobInfoAValidationError) ErrorName() string { return "JobInfoAValidationError" }

// Error satisfies the builtin error interface
func (e JobInfoAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobInfoA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobInfoAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobInfoAValidationError{}

// Validate checks the field values on JobInfoByListA with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobInfoByListA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobInfoByListA with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobInfoByListAMultiError,
// or nil if none found.
func (m *JobInfoByListA) ValidateAll() error {
	return m.validate(true)
}

func (m *JobInfoByListA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for JobName

	// no validation rules for BizId

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for ErrLogCount

	// no validation rules for Status

	// no validation rules for CreateTime

	// no validation rules for RateType

	// no validation rules for RateSec

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoByListAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoByListAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoByListAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	if len(errors) > 0 {
		return JobInfoByListAMultiError(errors)
	}

	return nil
}

// JobInfoByListAMultiError is an error wrapping multiple validation errors
// returned by JobInfoByListA.ValidateAll() if the designated constraints
// aren't met.
type JobInfoByListAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobInfoByListAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobInfoByListAMultiError) AllErrors() []error { return m }

// JobInfoByListAValidationError is the validation error returned by
// JobInfoByListA.Validate if the designated constraints aren't met.
type JobInfoByListAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobInfoByListAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobInfoByListAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobInfoByListAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobInfoByListAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobInfoByListAValidationError) ErrorName() string { return "JobInfoByListAValidationError" }

// Error satisfies the builtin error interface
func (e JobInfoByListAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobInfoByListA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobInfoByListAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobInfoByListAValidationError{}

// Validate checks the field values on DataLogQ with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataLogQ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataLogQ with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataLogQMultiError, or nil
// if none found.
func (m *DataLogQ) ValidateAll() error {
	return m.validate(true)
}

func (m *DataLogQ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	// no validation rules for Remark

	// no validation rules for Extend

	// no validation rules for LogType

	if len(errors) > 0 {
		return DataLogQMultiError(errors)
	}

	return nil
}

// DataLogQMultiError is an error wrapping multiple validation errors returned
// by DataLogQ.ValidateAll() if the designated constraints aren't met.
type DataLogQMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataLogQMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataLogQMultiError) AllErrors() []error { return m }

// DataLogQValidationError is the validation error returned by
// DataLogQ.Validate if the designated constraints aren't met.
type DataLogQValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataLogQValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataLogQValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataLogQValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataLogQValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataLogQValidationError) ErrorName() string { return "DataLogQValidationError" }

// Error satisfies the builtin error interface
func (e DataLogQValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataLogQ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataLogQValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataLogQValidationError{}

// Validate checks the field values on LogInfoByListA with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogInfoByListA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogInfoByListA with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogInfoByListAMultiError,
// or nil if none found.
func (m *LogInfoByListA) ValidateAll() error {
	return m.validate(true)
}

func (m *LogInfoByListA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	// no validation rules for Remark

	// no validation rules for Extend

	// no validation rules for LogType

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return LogInfoByListAMultiError(errors)
	}

	return nil
}

// LogInfoByListAMultiError is an error wrapping multiple validation errors
// returned by LogInfoByListA.ValidateAll() if the designated constraints
// aren't met.
type LogInfoByListAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogInfoByListAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogInfoByListAMultiError) AllErrors() []error { return m }

// LogInfoByListAValidationError is the validation error returned by
// LogInfoByListA.Validate if the designated constraints aren't met.
type LogInfoByListAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogInfoByListAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogInfoByListAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogInfoByListAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogInfoByListAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogInfoByListAValidationError) ErrorName() string { return "LogInfoByListAValidationError" }

// Error satisfies the builtin error interface
func (e LogInfoByListAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogInfoByListA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogInfoByListAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogInfoByListAValidationError{}

// Validate checks the field values on AdminCreateJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateJobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateJobReqMultiError, or nil if none found.
func (m *AdminCreateJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBizId() <= 0 {
		err := AdminCreateJobReqValidationError{
			field:  "BizId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for JobName

	// no validation rules for JobData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for RateType

	// no validation rules for RateSec

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminCreateJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminCreateJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminCreateJobReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartNow

	if len(errors) > 0 {
		return AdminCreateJobReqMultiError(errors)
	}

	return nil
}

// AdminCreateJobReqMultiError is an error wrapping multiple validation errors
// returned by AdminCreateJobReq.ValidateAll() if the designated constraints
// aren't met.
type AdminCreateJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateJobReqMultiError) AllErrors() []error { return m }

// AdminCreateJobReqValidationError is the validation error returned by
// AdminCreateJobReq.Validate if the designated constraints aren't met.
type AdminCreateJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateJobReqValidationError) ErrorName() string {
	return "AdminCreateJobReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateJobReqValidationError{}

// Validate checks the field values on AdminCreateJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateJobRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateJobRspMultiError, or nil if none found.
func (m *AdminCreateJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return AdminCreateJobRspMultiError(errors)
	}

	return nil
}

// AdminCreateJobRspMultiError is an error wrapping multiple validation errors
// returned by AdminCreateJobRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminCreateJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateJobRspMultiError) AllErrors() []error { return m }

// AdminCreateJobRspValidationError is the validation error returned by
// AdminCreateJobRsp.Validate if the designated constraints aren't met.
type AdminCreateJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateJobRspValidationError) ErrorName() string {
	return "AdminCreateJobRspValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateJobRspValidationError{}

// Validate checks the field values on AdminUpdateJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateJobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateJobReqMultiError, or nil if none found.
func (m *AdminUpdateJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobName

	// no validation rules for JobData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for RateType

	// no validation rules for RateSec

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateJobReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JobId

	if len(errors) > 0 {
		return AdminUpdateJobReqMultiError(errors)
	}

	return nil
}

// AdminUpdateJobReqMultiError is an error wrapping multiple validation errors
// returned by AdminUpdateJobReq.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdateJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateJobReqMultiError) AllErrors() []error { return m }

// AdminUpdateJobReqValidationError is the validation error returned by
// AdminUpdateJobReq.Validate if the designated constraints aren't met.
type AdminUpdateJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateJobReqValidationError) ErrorName() string {
	return "AdminUpdateJobReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateJobReqValidationError{}

// Validate checks the field values on AdminUpdateJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateJobRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateJobRspMultiError, or nil if none found.
func (m *AdminUpdateJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminUpdateJobRspMultiError(errors)
	}

	return nil
}

// AdminUpdateJobRspMultiError is an error wrapping multiple validation errors
// returned by AdminUpdateJobRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdateJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateJobRspMultiError) AllErrors() []error { return m }

// AdminUpdateJobRspValidationError is the validation error returned by
// AdminUpdateJobRsp.Validate if the designated constraints aren't met.
type AdminUpdateJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateJobRspValidationError) ErrorName() string {
	return "AdminUpdateJobRspValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateJobRspValidationError{}

// Validate checks the field values on AdminStartJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStartJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStartJobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStartJobReqMultiError, or nil if none found.
func (m *AdminStartJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStartJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := AdminStartJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminStartJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminStartJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminStartJobReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminStartJobReqMultiError(errors)
	}

	return nil
}

// AdminStartJobReqMultiError is an error wrapping multiple validation errors
// returned by AdminStartJobReq.ValidateAll() if the designated constraints
// aren't met.
type AdminStartJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStartJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStartJobReqMultiError) AllErrors() []error { return m }

// AdminStartJobReqValidationError is the validation error returned by
// AdminStartJobReq.Validate if the designated constraints aren't met.
type AdminStartJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStartJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStartJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStartJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStartJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStartJobReqValidationError) ErrorName() string { return "AdminStartJobReqValidationError" }

// Error satisfies the builtin error interface
func (e AdminStartJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStartJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStartJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStartJobReqValidationError{}

// Validate checks the field values on AdminStartJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStartJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStartJobRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStartJobRspMultiError, or nil if none found.
func (m *AdminStartJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStartJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminStartJobRspMultiError(errors)
	}

	return nil
}

// AdminStartJobRspMultiError is an error wrapping multiple validation errors
// returned by AdminStartJobRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminStartJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStartJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStartJobRspMultiError) AllErrors() []error { return m }

// AdminStartJobRspValidationError is the validation error returned by
// AdminStartJobRsp.Validate if the designated constraints aren't met.
type AdminStartJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStartJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStartJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStartJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStartJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStartJobRspValidationError) ErrorName() string { return "AdminStartJobRspValidationError" }

// Error satisfies the builtin error interface
func (e AdminStartJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStartJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStartJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStartJobRspValidationError{}

// Validate checks the field values on AdminStopJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStopJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStopJobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStopJobReqMultiError, or nil if none found.
func (m *AdminStopJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStopJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := AdminStopJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminStopJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminStopJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminStopJobReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminStopJobReqMultiError(errors)
	}

	return nil
}

// AdminStopJobReqMultiError is an error wrapping multiple validation errors
// returned by AdminStopJobReq.ValidateAll() if the designated constraints
// aren't met.
type AdminStopJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStopJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStopJobReqMultiError) AllErrors() []error { return m }

// AdminStopJobReqValidationError is the validation error returned by
// AdminStopJobReq.Validate if the designated constraints aren't met.
type AdminStopJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStopJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStopJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStopJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStopJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStopJobReqValidationError) ErrorName() string { return "AdminStopJobReqValidationError" }

// Error satisfies the builtin error interface
func (e AdminStopJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStopJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStopJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStopJobReqValidationError{}

// Validate checks the field values on AdminStopJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStopJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStopJobRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStopJobRspMultiError, or nil if none found.
func (m *AdminStopJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStopJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminStopJobRspMultiError(errors)
	}

	return nil
}

// AdminStopJobRspMultiError is an error wrapping multiple validation errors
// returned by AdminStopJobRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminStopJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStopJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStopJobRspMultiError) AllErrors() []error { return m }

// AdminStopJobRspValidationError is the validation error returned by
// AdminStopJobRsp.Validate if the designated constraints aren't met.
type AdminStopJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStopJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStopJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStopJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStopJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStopJobRspValidationError) ErrorName() string { return "AdminStopJobRspValidationError" }

// Error satisfies the builtin error interface
func (e AdminStopJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStopJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStopJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStopJobRspValidationError{}

// Validate checks the field values on QueryAllBizNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAllBizNameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAllBizNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAllBizNameReqMultiError, or nil if none found.
func (m *QueryAllBizNameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAllBizNameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryAllBizNameReqMultiError(errors)
	}

	return nil
}

// QueryAllBizNameReqMultiError is an error wrapping multiple validation errors
// returned by QueryAllBizNameReq.ValidateAll() if the designated constraints
// aren't met.
type QueryAllBizNameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAllBizNameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAllBizNameReqMultiError) AllErrors() []error { return m }

// QueryAllBizNameReqValidationError is the validation error returned by
// QueryAllBizNameReq.Validate if the designated constraints aren't met.
type QueryAllBizNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAllBizNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAllBizNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAllBizNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAllBizNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAllBizNameReqValidationError) ErrorName() string {
	return "QueryAllBizNameReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAllBizNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAllBizNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAllBizNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAllBizNameReqValidationError{}

// Validate checks the field values on QueryAllBizNameRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAllBizNameRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAllBizNameRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAllBizNameRspMultiError, or nil if none found.
func (m *QueryAllBizNameRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAllBizNameRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLine() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryAllBizNameRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryAllBizNameRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryAllBizNameRspValidationError{
					field:  fmt.Sprintf("Line[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryAllBizNameRspMultiError(errors)
	}

	return nil
}

// QueryAllBizNameRspMultiError is an error wrapping multiple validation errors
// returned by QueryAllBizNameRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryAllBizNameRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAllBizNameRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAllBizNameRspMultiError) AllErrors() []error { return m }

// QueryAllBizNameRspValidationError is the validation error returned by
// QueryAllBizNameRsp.Validate if the designated constraints aren't met.
type QueryAllBizNameRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAllBizNameRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAllBizNameRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAllBizNameRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAllBizNameRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAllBizNameRspValidationError) ErrorName() string {
	return "QueryAllBizNameRspValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAllBizNameRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAllBizNameRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAllBizNameRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAllBizNameRspValidationError{}

// Validate checks the field values on QueryBizInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizInfoReqMultiError, or nil if none found.
func (m *QueryBizInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBizId() <= 0 {
		err := QueryBizInfoReqValidationError{
			field:  "BizId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryBizInfoReqMultiError(errors)
	}

	return nil
}

// QueryBizInfoReqMultiError is an error wrapping multiple validation errors
// returned by QueryBizInfoReq.ValidateAll() if the designated constraints
// aren't met.
type QueryBizInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizInfoReqMultiError) AllErrors() []error { return m }

// QueryBizInfoReqValidationError is the validation error returned by
// QueryBizInfoReq.Validate if the designated constraints aren't met.
type QueryBizInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizInfoReqValidationError) ErrorName() string { return "QueryBizInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizInfoReqValidationError{}

// Validate checks the field values on QueryBizInfoRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizInfoRspMultiError, or nil if none found.
func (m *QueryBizInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryBizInfoRspValidationError{
					field:  "Line",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryBizInfoRspValidationError{
					field:  "Line",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryBizInfoRspValidationError{
				field:  "Line",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryBizInfoRspMultiError(errors)
	}

	return nil
}

// QueryBizInfoRspMultiError is an error wrapping multiple validation errors
// returned by QueryBizInfoRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryBizInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizInfoRspMultiError) AllErrors() []error { return m }

// QueryBizInfoRspValidationError is the validation error returned by
// QueryBizInfoRsp.Validate if the designated constraints aren't met.
type QueryBizInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizInfoRspValidationError) ErrorName() string { return "QueryBizInfoRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizInfoRspValidationError{}

// Validate checks the field values on QueryBizListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizListReqMultiError, or nil if none found.
func (m *QueryBizListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := QueryBizListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 5 {
		err := QueryBizListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBizId() < 0 {
		err := QueryBizListReqValidationError{
			field:  "BizId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OpUser

	// no validation rules for Status

	if len(errors) > 0 {
		return QueryBizListReqMultiError(errors)
	}

	return nil
}

// QueryBizListReqMultiError is an error wrapping multiple validation errors
// returned by QueryBizListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryBizListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizListReqMultiError) AllErrors() []error { return m }

// QueryBizListReqValidationError is the validation error returned by
// QueryBizListReq.Validate if the designated constraints aren't met.
type QueryBizListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizListReqValidationError) ErrorName() string { return "QueryBizListReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizListReqValidationError{}

// Validate checks the field values on QueryBizListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizListRspMultiError, or nil if none found.
func (m *QueryBizListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageSize

	for idx, item := range m.GetLine() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryBizListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryBizListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryBizListRspValidationError{
					field:  fmt.Sprintf("Line[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryBizListRspMultiError(errors)
	}

	return nil
}

// QueryBizListRspMultiError is an error wrapping multiple validation errors
// returned by QueryBizListRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryBizListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizListRspMultiError) AllErrors() []error { return m }

// QueryBizListRspValidationError is the validation error returned by
// QueryBizListRsp.Validate if the designated constraints aren't met.
type QueryBizListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizListRspValidationError) ErrorName() string { return "QueryBizListRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizListRspValidationError{}

// Validate checks the field values on QueryJobInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryJobInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobInfoReqMultiError, or nil if none found.
func (m *QueryJobInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := QueryJobInfoReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryJobInfoReqMultiError(errors)
	}

	return nil
}

// QueryJobInfoReqMultiError is an error wrapping multiple validation errors
// returned by QueryJobInfoReq.ValidateAll() if the designated constraints
// aren't met.
type QueryJobInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobInfoReqMultiError) AllErrors() []error { return m }

// QueryJobInfoReqValidationError is the validation error returned by
// QueryJobInfoReq.Validate if the designated constraints aren't met.
type QueryJobInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobInfoReqValidationError) ErrorName() string { return "QueryJobInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryJobInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobInfoReqValidationError{}

// Validate checks the field values on QueryJobInfoRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryJobInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobInfoRspMultiError, or nil if none found.
func (m *QueryJobInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryJobInfoRspValidationError{
					field:  "Line",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryJobInfoRspValidationError{
					field:  "Line",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryJobInfoRspValidationError{
				field:  "Line",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryJobInfoRspMultiError(errors)
	}

	return nil
}

// QueryJobInfoRspMultiError is an error wrapping multiple validation errors
// returned by QueryJobInfoRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryJobInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobInfoRspMultiError) AllErrors() []error { return m }

// QueryJobInfoRspValidationError is the validation error returned by
// QueryJobInfoRsp.Validate if the designated constraints aren't met.
type QueryJobInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobInfoRspValidationError) ErrorName() string { return "QueryJobInfoRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryJobInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobInfoRspValidationError{}

// Validate checks the field values on QueryJobListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryJobListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobListReqMultiError, or nil if none found.
func (m *QueryJobListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := QueryJobListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 5 {
		err := QueryJobListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBizId() < 0 {
		err := QueryJobListReqValidationError{
			field:  "BizId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for OpUser

	if len(errors) > 0 {
		return QueryJobListReqMultiError(errors)
	}

	return nil
}

// QueryJobListReqMultiError is an error wrapping multiple validation errors
// returned by QueryJobListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryJobListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobListReqMultiError) AllErrors() []error { return m }

// QueryJobListReqValidationError is the validation error returned by
// QueryJobListReq.Validate if the designated constraints aren't met.
type QueryJobListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobListReqValidationError) ErrorName() string { return "QueryJobListReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryJobListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobListReqValidationError{}

// Validate checks the field values on QueryJobListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryJobListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobListRspMultiError, or nil if none found.
func (m *QueryJobListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageSize

	for idx, item := range m.GetLine() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryJobListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryJobListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryJobListRspValidationError{
					field:  fmt.Sprintf("Line[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryJobListRspMultiError(errors)
	}

	return nil
}

// QueryJobListRspMultiError is an error wrapping multiple validation errors
// returned by QueryJobListRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryJobListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobListRspMultiError) AllErrors() []error { return m }

// QueryJobListRspValidationError is the validation error returned by
// QueryJobListRsp.Validate if the designated constraints aren't met.
type QueryJobListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobListRspValidationError) ErrorName() string { return "QueryJobListRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryJobListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobListRspValidationError{}

// Validate checks the field values on QueryJobStateInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobStateInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobStateInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobStateInfoReqMultiError, or nil if none found.
func (m *QueryJobStateInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobStateInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryJobStateInfoReqMultiError(errors)
	}

	return nil
}

// QueryJobStateInfoReqMultiError is an error wrapping multiple validation
// errors returned by QueryJobStateInfoReq.ValidateAll() if the designated
// constraints aren't met.
type QueryJobStateInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobStateInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobStateInfoReqMultiError) AllErrors() []error { return m }

// QueryJobStateInfoReqValidationError is the validation error returned by
// QueryJobStateInfoReq.Validate if the designated constraints aren't met.
type QueryJobStateInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobStateInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobStateInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobStateInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobStateInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobStateInfoReqValidationError) ErrorName() string {
	return "QueryJobStateInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobStateInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobStateInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobStateInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobStateInfoReqValidationError{}

// Validate checks the field values on JobStateInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobStateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobStateInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobStateInfoMultiError, or
// nil if none found.
func (m *JobStateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *JobStateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for ErrLogCount

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobStateInfoValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobStateInfoValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobStateInfoValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	if len(errors) > 0 {
		return JobStateInfoMultiError(errors)
	}

	return nil
}

// JobStateInfoMultiError is an error wrapping multiple validation errors
// returned by JobStateInfo.ValidateAll() if the designated constraints aren't met.
type JobStateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobStateInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobStateInfoMultiError) AllErrors() []error { return m }

// JobStateInfoValidationError is the validation error returned by
// JobStateInfo.Validate if the designated constraints aren't met.
type JobStateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobStateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobStateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobStateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobStateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobStateInfoValidationError) ErrorName() string { return "JobStateInfoValidationError" }

// Error satisfies the builtin error interface
func (e JobStateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobStateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobStateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobStateInfoValidationError{}

// Validate checks the field values on QueryJobStateInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobStateInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobStateInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobStateInfoRspMultiError, or nil if none found.
func (m *QueryJobStateInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobStateInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobStateInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryJobStateInfoRspValidationError{
						field:  fmt.Sprintf("JobStateInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryJobStateInfoRspValidationError{
						field:  fmt.Sprintf("JobStateInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryJobStateInfoRspValidationError{
					field:  fmt.Sprintf("JobStateInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryJobStateInfoRspMultiError(errors)
	}

	return nil
}

// QueryJobStateInfoRspMultiError is an error wrapping multiple validation
// errors returned by QueryJobStateInfoRsp.ValidateAll() if the designated
// constraints aren't met.
type QueryJobStateInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobStateInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobStateInfoRspMultiError) AllErrors() []error { return m }

// QueryJobStateInfoRspValidationError is the validation error returned by
// QueryJobStateInfoRsp.Validate if the designated constraints aren't met.
type QueryJobStateInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobStateInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobStateInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobStateInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobStateInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobStateInfoRspValidationError) ErrorName() string {
	return "QueryJobStateInfoRspValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobStateInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobStateInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobStateInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobStateInfoRspValidationError{}

// Validate checks the field values on QueryJobDataLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobDataLogReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobDataLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobDataLogReqMultiError, or nil if none found.
func (m *QueryJobDataLogReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobDataLogReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := QueryJobDataLogReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NextCursor

	if m.GetPageSize() < 5 {
		err := QueryJobDataLogReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return QueryJobDataLogReqMultiError(errors)
	}

	return nil
}

// QueryJobDataLogReqMultiError is an error wrapping multiple validation errors
// returned by QueryJobDataLogReq.ValidateAll() if the designated constraints
// aren't met.
type QueryJobDataLogReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobDataLogReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobDataLogReqMultiError) AllErrors() []error { return m }

// QueryJobDataLogReqValidationError is the validation error returned by
// QueryJobDataLogReq.Validate if the designated constraints aren't met.
type QueryJobDataLogReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobDataLogReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobDataLogReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobDataLogReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobDataLogReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobDataLogReqValidationError) ErrorName() string {
	return "QueryJobDataLogReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobDataLogReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobDataLogReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobDataLogReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobDataLogReqValidationError{}

// Validate checks the field values on QueryJobDataLogRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobDataLogRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobDataLogRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobDataLogRspMultiError, or nil if none found.
func (m *QueryJobDataLogRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobDataLogRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextCursor

	// no validation rules for PageSize

	for idx, item := range m.GetLine() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryJobDataLogRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryJobDataLogRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryJobDataLogRspValidationError{
					field:  fmt.Sprintf("Line[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryJobDataLogRspMultiError(errors)
	}

	return nil
}

// QueryJobDataLogRspMultiError is an error wrapping multiple validation errors
// returned by QueryJobDataLogRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryJobDataLogRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobDataLogRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobDataLogRspMultiError) AllErrors() []error { return m }

// QueryJobDataLogRspValidationError is the validation error returned by
// QueryJobDataLogRsp.Validate if the designated constraints aren't met.
type QueryJobDataLogRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobDataLogRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobDataLogRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobDataLogRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobDataLogRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobDataLogRspValidationError) ErrorName() string {
	return "QueryJobDataLogRspValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobDataLogRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobDataLogRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobDataLogRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobDataLogRspValidationError{}

// Validate checks the field values on BizStartJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStartJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStartJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStartJobReqMultiError,
// or nil if none found.
func (m *BizStartJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStartJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizStartJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	if len(errors) > 0 {
		return BizStartJobReqMultiError(errors)
	}

	return nil
}

// BizStartJobReqMultiError is an error wrapping multiple validation errors
// returned by BizStartJobReq.ValidateAll() if the designated constraints
// aren't met.
type BizStartJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStartJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStartJobReqMultiError) AllErrors() []error { return m }

// BizStartJobReqValidationError is the validation error returned by
// BizStartJobReq.Validate if the designated constraints aren't met.
type BizStartJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStartJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStartJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStartJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStartJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStartJobReqValidationError) ErrorName() string { return "BizStartJobReqValidationError" }

// Error satisfies the builtin error interface
func (e BizStartJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStartJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStartJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStartJobReqValidationError{}

// Validate checks the field values on BizStartJobRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStartJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStartJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStartJobRspMultiError,
// or nil if none found.
func (m *BizStartJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStartJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizStartJobRspMultiError(errors)
	}

	return nil
}

// BizStartJobRspMultiError is an error wrapping multiple validation errors
// returned by BizStartJobRsp.ValidateAll() if the designated constraints
// aren't met.
type BizStartJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStartJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStartJobRspMultiError) AllErrors() []error { return m }

// BizStartJobRspValidationError is the validation error returned by
// BizStartJobRsp.Validate if the designated constraints aren't met.
type BizStartJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStartJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStartJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStartJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStartJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStartJobRspValidationError) ErrorName() string { return "BizStartJobRspValidationError" }

// Error satisfies the builtin error interface
func (e BizStartJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStartJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStartJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStartJobRspValidationError{}

// Validate checks the field values on BizUpdateJobDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BizUpdateJobDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizUpdateJobDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizUpdateJobDataReqMultiError, or nil if none found.
func (m *BizUpdateJobDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizUpdateJobDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizUpdateJobDataReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for JobData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for Remark

	if len(errors) > 0 {
		return BizUpdateJobDataReqMultiError(errors)
	}

	return nil
}

// BizUpdateJobDataReqMultiError is an error wrapping multiple validation
// errors returned by BizUpdateJobDataReq.ValidateAll() if the designated
// constraints aren't met.
type BizUpdateJobDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizUpdateJobDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizUpdateJobDataReqMultiError) AllErrors() []error { return m }

// BizUpdateJobDataReqValidationError is the validation error returned by
// BizUpdateJobDataReq.Validate if the designated constraints aren't met.
type BizUpdateJobDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizUpdateJobDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizUpdateJobDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizUpdateJobDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizUpdateJobDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizUpdateJobDataReqValidationError) ErrorName() string {
	return "BizUpdateJobDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e BizUpdateJobDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizUpdateJobDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizUpdateJobDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizUpdateJobDataReqValidationError{}

// Validate checks the field values on BizUpdateJobDataRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BizUpdateJobDataRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizUpdateJobDataRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizUpdateJobDataRspMultiError, or nil if none found.
func (m *BizUpdateJobDataRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizUpdateJobDataRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizUpdateJobDataRspMultiError(errors)
	}

	return nil
}

// BizUpdateJobDataRspMultiError is an error wrapping multiple validation
// errors returned by BizUpdateJobDataRsp.ValidateAll() if the designated
// constraints aren't met.
type BizUpdateJobDataRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizUpdateJobDataRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizUpdateJobDataRspMultiError) AllErrors() []error { return m }

// BizUpdateJobDataRspValidationError is the validation error returned by
// BizUpdateJobDataRsp.Validate if the designated constraints aren't met.
type BizUpdateJobDataRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizUpdateJobDataRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizUpdateJobDataRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizUpdateJobDataRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizUpdateJobDataRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizUpdateJobDataRspValidationError) ErrorName() string {
	return "BizUpdateJobDataRspValidationError"
}

// Error satisfies the builtin error interface
func (e BizUpdateJobDataRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizUpdateJobDataRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizUpdateJobDataRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizUpdateJobDataRspValidationError{}

// Validate checks the field values on BizStopJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStopJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStopJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStopJobReqMultiError, or
// nil if none found.
func (m *BizStopJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStopJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizStopJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	if len(errors) > 0 {
		return BizStopJobReqMultiError(errors)
	}

	return nil
}

// BizStopJobReqMultiError is an error wrapping multiple validation errors
// returned by BizStopJobReq.ValidateAll() if the designated constraints
// aren't met.
type BizStopJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStopJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStopJobReqMultiError) AllErrors() []error { return m }

// BizStopJobReqValidationError is the validation error returned by
// BizStopJobReq.Validate if the designated constraints aren't met.
type BizStopJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStopJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStopJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStopJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStopJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStopJobReqValidationError) ErrorName() string { return "BizStopJobReqValidationError" }

// Error satisfies the builtin error interface
func (e BizStopJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStopJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStopJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStopJobReqValidationError{}

// Validate checks the field values on BizStopJobRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStopJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStopJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStopJobRspMultiError, or
// nil if none found.
func (m *BizStopJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStopJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizStopJobRspMultiError(errors)
	}

	return nil
}

// BizStopJobRspMultiError is an error wrapping multiple validation errors
// returned by BizStopJobRsp.ValidateAll() if the designated constraints
// aren't met.
type BizStopJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStopJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStopJobRspMultiError) AllErrors() []error { return m }

// BizStopJobRspValidationError is the validation error returned by
// BizStopJobRsp.Validate if the designated constraints aren't met.
type BizStopJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStopJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStopJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStopJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStopJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStopJobRspValidationError) ErrorName() string { return "BizStopJobRspValidationError" }

// Error satisfies the builtin error interface
func (e BizStopJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStopJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStopJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStopJobRspValidationError{}

// Validate checks the field values on BizAddDataLogReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BizAddDataLogReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizAddDataLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizAddDataLogReqMultiError, or nil if none found.
func (m *BizAddDataLogReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizAddDataLogReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizAddDataLogReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetLog() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BizAddDataLogReqValidationError{
						field:  fmt.Sprintf("Log[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BizAddDataLogReqValidationError{
						field:  fmt.Sprintf("Log[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BizAddDataLogReqValidationError{
					field:  fmt.Sprintf("Log[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BizAddDataLogReqMultiError(errors)
	}

	return nil
}

// BizAddDataLogReqMultiError is an error wrapping multiple validation errors
// returned by BizAddDataLogReq.ValidateAll() if the designated constraints
// aren't met.
type BizAddDataLogReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizAddDataLogReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizAddDataLogReqMultiError) AllErrors() []error { return m }

// BizAddDataLogReqValidationError is the validation error returned by
// BizAddDataLogReq.Validate if the designated constraints aren't met.
type BizAddDataLogReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizAddDataLogReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizAddDataLogReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizAddDataLogReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizAddDataLogReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizAddDataLogReqValidationError) ErrorName() string { return "BizAddDataLogReqValidationError" }

// Error satisfies the builtin error interface
func (e BizAddDataLogReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizAddDataLogReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizAddDataLogReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizAddDataLogReqValidationError{}

// Validate checks the field values on BizAddDataLogRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BizAddDataLogRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizAddDataLogRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizAddDataLogRspMultiError, or nil if none found.
func (m *BizAddDataLogRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizAddDataLogRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizAddDataLogRspMultiError(errors)
	}

	return nil
}

// BizAddDataLogRspMultiError is an error wrapping multiple validation errors
// returned by BizAddDataLogRsp.ValidateAll() if the designated constraints
// aren't met.
type BizAddDataLogRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizAddDataLogRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizAddDataLogRspMultiError) AllErrors() []error { return m }

// BizAddDataLogRspValidationError is the validation error returned by
// BizAddDataLogRsp.Validate if the designated constraints aren't met.
type BizAddDataLogRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizAddDataLogRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizAddDataLogRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizAddDataLogRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizAddDataLogRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizAddDataLogRspValidationError) ErrorName() string { return "BizAddDataLogRspValidationError" }

// Error satisfies the builtin error interface
func (e BizAddDataLogRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizAddDataLogRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizAddDataLogRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizAddDataLogRspValidationError{}

// Validate checks the field values on JobBeforeCreateAndChangeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobBeforeCreateAndChangeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobBeforeCreateAndChangeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobBeforeCreateAndChangeReqMultiError, or nil if none found.
func (m *JobBeforeCreateAndChangeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JobBeforeCreateAndChangeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobName

	// no validation rules for BizId

	// no validation rules for JobData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for RateType

	// no validation rules for RateSec

	// no validation rules for JobId

	// no validation rules for IsCreate

	if len(errors) > 0 {
		return JobBeforeCreateAndChangeReqMultiError(errors)
	}

	return nil
}

// JobBeforeCreateAndChangeReqMultiError is an error wrapping multiple
// validation errors returned by JobBeforeCreateAndChangeReq.ValidateAll() if
// the designated constraints aren't met.
type JobBeforeCreateAndChangeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobBeforeCreateAndChangeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobBeforeCreateAndChangeReqMultiError) AllErrors() []error { return m }

// JobBeforeCreateAndChangeReqValidationError is the validation error returned
// by JobBeforeCreateAndChangeReq.Validate if the designated constraints
// aren't met.
type JobBeforeCreateAndChangeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobBeforeCreateAndChangeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobBeforeCreateAndChangeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobBeforeCreateAndChangeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobBeforeCreateAndChangeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobBeforeCreateAndChangeReqValidationError) ErrorName() string {
	return "JobBeforeCreateAndChangeReqValidationError"
}

// Error satisfies the builtin error interface
func (e JobBeforeCreateAndChangeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobBeforeCreateAndChangeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobBeforeCreateAndChangeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobBeforeCreateAndChangeReqValidationError{}

// Validate checks the field values on JobBeforeCreateAndChangeRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobBeforeCreateAndChangeRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobBeforeCreateAndChangeRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobBeforeCreateAndChangeRspMultiError, or nil if none found.
func (m *JobBeforeCreateAndChangeRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *JobBeforeCreateAndChangeRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobBeforeCreateAndChangeRspMultiError(errors)
	}

	return nil
}

// JobBeforeCreateAndChangeRspMultiError is an error wrapping multiple
// validation errors returned by JobBeforeCreateAndChangeRsp.ValidateAll() if
// the designated constraints aren't met.
type JobBeforeCreateAndChangeRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobBeforeCreateAndChangeRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobBeforeCreateAndChangeRspMultiError) AllErrors() []error { return m }

// JobBeforeCreateAndChangeRspValidationError is the validation error returned
// by JobBeforeCreateAndChangeRsp.Validate if the designated constraints
// aren't met.
type JobBeforeCreateAndChangeRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobBeforeCreateAndChangeRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobBeforeCreateAndChangeRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobBeforeCreateAndChangeRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobBeforeCreateAndChangeRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobBeforeCreateAndChangeRspValidationError) ErrorName() string {
	return "JobBeforeCreateAndChangeRspValidationError"
}

// Error satisfies the builtin error interface
func (e JobBeforeCreateAndChangeRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobBeforeCreateAndChangeRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobBeforeCreateAndChangeRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobBeforeCreateAndChangeRspValidationError{}

// Validate checks the field values on JobBeforeRunReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobBeforeRunReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobBeforeRunReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobBeforeRunReqMultiError, or nil if none found.
func (m *JobBeforeRunReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JobBeforeRunReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for JobName

	// no validation rules for BizId

	// no validation rules for BizName

	// no validation rules for JobData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for AuthCode

	if len(errors) > 0 {
		return JobBeforeRunReqMultiError(errors)
	}

	return nil
}

// JobBeforeRunReqMultiError is an error wrapping multiple validation errors
// returned by JobBeforeRunReq.ValidateAll() if the designated constraints
// aren't met.
type JobBeforeRunReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobBeforeRunReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobBeforeRunReqMultiError) AllErrors() []error { return m }

// JobBeforeRunReqValidationError is the validation error returned by
// JobBeforeRunReq.Validate if the designated constraints aren't met.
type JobBeforeRunReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobBeforeRunReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobBeforeRunReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobBeforeRunReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobBeforeRunReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobBeforeRunReqValidationError) ErrorName() string { return "JobBeforeRunReqValidationError" }

// Error satisfies the builtin error interface
func (e JobBeforeRunReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobBeforeRunReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobBeforeRunReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobBeforeRunReqValidationError{}

// Validate checks the field values on JobBeforeRunRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobBeforeRunRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobBeforeRunRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobBeforeRunRspMultiError, or nil if none found.
func (m *JobBeforeRunRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *JobBeforeRunRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobBeforeRunRspMultiError(errors)
	}

	return nil
}

// JobBeforeRunRspMultiError is an error wrapping multiple validation errors
// returned by JobBeforeRunRsp.ValidateAll() if the designated constraints
// aren't met.
type JobBeforeRunRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobBeforeRunRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobBeforeRunRspMultiError) AllErrors() []error { return m }

// JobBeforeRunRspValidationError is the validation error returned by
// JobBeforeRunRsp.Validate if the designated constraints aren't met.
type JobBeforeRunRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobBeforeRunRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobBeforeRunRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobBeforeRunRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobBeforeRunRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobBeforeRunRspValidationError) ErrorName() string { return "JobBeforeRunRspValidationError" }

// Error satisfies the builtin error interface
func (e JobBeforeRunRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobBeforeRunRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobBeforeRunRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobBeforeRunRspValidationError{}

// Validate checks the field values on JobProcessReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobProcessReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProcessReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobProcessReqMultiError, or
// nil if none found.
func (m *JobProcessReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProcessReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for DataIndex

	if len(errors) > 0 {
		return JobProcessReqMultiError(errors)
	}

	return nil
}

// JobProcessReqMultiError is an error wrapping multiple validation errors
// returned by JobProcessReq.ValidateAll() if the designated constraints
// aren't met.
type JobProcessReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProcessReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProcessReqMultiError) AllErrors() []error { return m }

// JobProcessReqValidationError is the validation error returned by
// JobProcessReq.Validate if the designated constraints aren't met.
type JobProcessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProcessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProcessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProcessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProcessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProcessReqValidationError) ErrorName() string { return "JobProcessReqValidationError" }

// Error satisfies the builtin error interface
func (e JobProcessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProcessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProcessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProcessReqValidationError{}

// Validate checks the field values on JobProcessRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobProcessRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProcessRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobProcessRspMultiError, or
// nil if none found.
func (m *JobProcessRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProcessRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobProcessRspMultiError(errors)
	}

	return nil
}

// JobProcessRspMultiError is an error wrapping multiple validation errors
// returned by JobProcessRsp.ValidateAll() if the designated constraints
// aren't met.
type JobProcessRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProcessRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProcessRspMultiError) AllErrors() []error { return m }

// JobProcessRspValidationError is the validation error returned by
// JobProcessRsp.Validate if the designated constraints aren't met.
type JobProcessRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProcessRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProcessRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProcessRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProcessRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProcessRspValidationError) ErrorName() string { return "JobProcessRspValidationError" }

// Error satisfies the builtin error interface
func (e JobProcessRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProcessRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProcessRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProcessRspValidationError{}

// Validate checks the field values on JobProcessStopReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobProcessStopReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProcessStopReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobProcessStopReqMultiError, or nil if none found.
func (m *JobProcessStopReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProcessStopReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for JobName

	// no validation rules for BizId

	// no validation rules for BizName

	// no validation rules for JobData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedCount

	// no validation rules for IsFinished

	if len(errors) > 0 {
		return JobProcessStopReqMultiError(errors)
	}

	return nil
}

// JobProcessStopReqMultiError is an error wrapping multiple validation errors
// returned by JobProcessStopReq.ValidateAll() if the designated constraints
// aren't met.
type JobProcessStopReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProcessStopReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProcessStopReqMultiError) AllErrors() []error { return m }

// JobProcessStopReqValidationError is the validation error returned by
// JobProcessStopReq.Validate if the designated constraints aren't met.
type JobProcessStopReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProcessStopReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProcessStopReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProcessStopReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProcessStopReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProcessStopReqValidationError) ErrorName() string {
	return "JobProcessStopReqValidationError"
}

// Error satisfies the builtin error interface
func (e JobProcessStopReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProcessStopReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProcessStopReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProcessStopReqValidationError{}

// Validate checks the field values on JobProcessStopRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobProcessStopRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProcessStopRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobProcessStopRspMultiError, or nil if none found.
func (m *JobProcessStopRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProcessStopRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobProcessStopRspMultiError(errors)
	}

	return nil
}

// JobProcessStopRspMultiError is an error wrapping multiple validation errors
// returned by JobProcessStopRsp.ValidateAll() if the designated constraints
// aren't met.
type JobProcessStopRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobProcessStopRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobProcessStopRspMultiError) AllErrors() []error { return m }

// JobProcessStopRspValidationError is the validation error returned by
// JobProcessStopRsp.Validate if the designated constraints aren't met.
type JobProcessStopRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProcessStopRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProcessStopRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProcessStopRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProcessStopRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProcessStopRspValidationError) ErrorName() string {
	return "JobProcessStopRspValidationError"
}

// Error satisfies the builtin error interface
func (e JobProcessStopRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProcessStopRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProcessStopRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProcessStopRspValidationError{}

// Validate checks the field values on QueryAllBizNameRsp_LineA with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAllBizNameRsp_LineA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAllBizNameRsp_LineA with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAllBizNameRsp_LineAMultiError, or nil if none found.
func (m *QueryAllBizNameRsp_LineA) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAllBizNameRsp_LineA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for BizName

	// no validation rules for Status

	if len(errors) > 0 {
		return QueryAllBizNameRsp_LineAMultiError(errors)
	}

	return nil
}

// QueryAllBizNameRsp_LineAMultiError is an error wrapping multiple validation
// errors returned by QueryAllBizNameRsp_LineA.ValidateAll() if the designated
// constraints aren't met.
type QueryAllBizNameRsp_LineAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAllBizNameRsp_LineAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAllBizNameRsp_LineAMultiError) AllErrors() []error { return m }

// QueryAllBizNameRsp_LineAValidationError is the validation error returned by
// QueryAllBizNameRsp_LineA.Validate if the designated constraints aren't met.
type QueryAllBizNameRsp_LineAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAllBizNameRsp_LineAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAllBizNameRsp_LineAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAllBizNameRsp_LineAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAllBizNameRsp_LineAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAllBizNameRsp_LineAValidationError) ErrorName() string {
	return "QueryAllBizNameRsp_LineAValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAllBizNameRsp_LineAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAllBizNameRsp_LineA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAllBizNameRsp_LineAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAllBizNameRsp_LineAValidationError{}
