// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: batch_job.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AdminRegistryBizReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRegistryBizReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRegistryBizReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRegistryBizReqMultiError, or nil if none found.
func (m *AdminRegistryBizReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRegistryBizReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBizType() <= 0 {
		err := AdminRegistryBizReqValidationError{
			field:  "BizType",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizName()) < 1 {
		err := AdminRegistryBizReqValidationError{
			field:  "BizName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	// no validation rules for ExecType

	if m.GetCbBeforeCreate() != "" {

		if uri, err := url.Parse(m.GetCbBeforeCreate()); err != nil {
			err = AdminRegistryBizReqValidationError{
				field:  "CbBeforeCreate",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := AdminRegistryBizReqValidationError{
				field:  "CbBeforeCreate",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCbBeforeRun() != "" {

		if uri, err := url.Parse(m.GetCbBeforeRun()); err != nil {
			err = AdminRegistryBizReqValidationError{
				field:  "CbBeforeRun",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := AdminRegistryBizReqValidationError{
				field:  "CbBeforeRun",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if uri, err := url.Parse(m.GetCbProcess()); err != nil {
		err = AdminRegistryBizReqValidationError{
			field:  "CbProcess",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := AdminRegistryBizReqValidationError{
			field:  "CbProcess",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbProcessStop() != "" {

		if uri, err := url.Parse(m.GetCbProcessStop()); err != nil {
			err = AdminRegistryBizReqValidationError{
				field:  "CbProcessStop",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := AdminRegistryBizReqValidationError{
				field:  "CbProcessStop",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCbBeforeCreateTimeout() < 0 {
		err := AdminRegistryBizReqValidationError{
			field:  "CbBeforeCreateTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbBeforeRunTimeout() < 0 {
		err := AdminRegistryBizReqValidationError{
			field:  "CbBeforeRunTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbProcessTimeout() < 0 {
		err := AdminRegistryBizReqValidationError{
			field:  "CbProcessTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCbProcessStopTimeout() < 0 {
		err := AdminRegistryBizReqValidationError{
			field:  "CbProcessStopTimeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RateType

	// no validation rules for RateSec

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminRegistryBizReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminRegistryBizReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminRegistryBizReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return AdminRegistryBizReqMultiError(errors)
	}

	return nil
}

// AdminRegistryBizReqMultiError is an error wrapping multiple validation
// errors returned by AdminRegistryBizReq.ValidateAll() if the designated
// constraints aren't met.
type AdminRegistryBizReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRegistryBizReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRegistryBizReqMultiError) AllErrors() []error { return m }

// AdminRegistryBizReqValidationError is the validation error returned by
// AdminRegistryBizReq.Validate if the designated constraints aren't met.
type AdminRegistryBizReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRegistryBizReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRegistryBizReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRegistryBizReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRegistryBizReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRegistryBizReqValidationError) ErrorName() string {
	return "AdminRegistryBizReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRegistryBizReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRegistryBizReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRegistryBizReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRegistryBizReqValidationError{}

// Validate checks the field values on AdminRegistryBizRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRegistryBizRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRegistryBizRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRegistryBizRspMultiError, or nil if none found.
func (m *AdminRegistryBizRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRegistryBizRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminRegistryBizRspMultiError(errors)
	}

	return nil
}

// AdminRegistryBizRspMultiError is an error wrapping multiple validation
// errors returned by AdminRegistryBizRsp.ValidateAll() if the designated
// constraints aren't met.
type AdminRegistryBizRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRegistryBizRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRegistryBizRspMultiError) AllErrors() []error { return m }

// AdminRegistryBizRspValidationError is the validation error returned by
// AdminRegistryBizRsp.Validate if the designated constraints aren't met.
type AdminRegistryBizRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRegistryBizRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRegistryBizRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRegistryBizRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRegistryBizRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRegistryBizRspValidationError) ErrorName() string {
	return "AdminRegistryBizRspValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRegistryBizRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRegistryBizRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRegistryBizRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRegistryBizRspValidationError{}

// Validate checks the field values on OpInfoQ with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpInfoQ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpInfoQ with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpInfoQMultiError, or nil if none found.
func (m *OpInfoQ) ValidateAll() error {
	return m.validate(true)
}

func (m *OpInfoQ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpSource

	// no validation rules for OpUserid

	// no validation rules for OpUserName

	// no validation rules for OpRemark

	if len(errors) > 0 {
		return OpInfoQMultiError(errors)
	}

	return nil
}

// OpInfoQMultiError is an error wrapping multiple validation errors returned
// by OpInfoQ.ValidateAll() if the designated constraints aren't met.
type OpInfoQMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpInfoQMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpInfoQMultiError) AllErrors() []error { return m }

// OpInfoQValidationError is the validation error returned by OpInfoQ.Validate
// if the designated constraints aren't met.
type OpInfoQValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpInfoQValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpInfoQValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpInfoQValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpInfoQValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpInfoQValidationError) ErrorName() string { return "OpInfoQValidationError" }

// Error satisfies the builtin error interface
func (e OpInfoQValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpInfoQ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpInfoQValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpInfoQValidationError{}

// Validate checks the field values on OpInfoA with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpInfoA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpInfoA with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpInfoAMultiError, or nil if none found.
func (m *OpInfoA) ValidateAll() error {
	return m.validate(true)
}

func (m *OpInfoA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpSource

	// no validation rules for OpUserid

	// no validation rules for OpUserName

	// no validation rules for OpRemark

	// no validation rules for OpTime

	if len(errors) > 0 {
		return OpInfoAMultiError(errors)
	}

	return nil
}

// OpInfoAMultiError is an error wrapping multiple validation errors returned
// by OpInfoA.ValidateAll() if the designated constraints aren't met.
type OpInfoAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpInfoAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpInfoAMultiError) AllErrors() []error { return m }

// OpInfoAValidationError is the validation error returned by OpInfoA.Validate
// if the designated constraints aren't met.
type OpInfoAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpInfoAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpInfoAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpInfoAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpInfoAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpInfoAValidationError) ErrorName() string { return "OpInfoAValidationError" }

// Error satisfies the builtin error interface
func (e OpInfoAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpInfoA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpInfoAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpInfoAValidationError{}

// Validate checks the field values on BizOpHistoryA with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizOpHistoryA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizOpHistoryA with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizOpHistoryAMultiError, or
// nil if none found.
func (m *BizOpHistoryA) ValidateAll() error {
	return m.validate(true)
}

func (m *BizOpHistoryA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizOpHistoryAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizOpHistoryAValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizOpHistoryAValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BizOpHistoryAMultiError(errors)
	}

	return nil
}

// BizOpHistoryAMultiError is an error wrapping multiple validation errors
// returned by BizOpHistoryA.ValidateAll() if the designated constraints
// aren't met.
type BizOpHistoryAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizOpHistoryAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizOpHistoryAMultiError) AllErrors() []error { return m }

// BizOpHistoryAValidationError is the validation error returned by
// BizOpHistoryA.Validate if the designated constraints aren't met.
type BizOpHistoryAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizOpHistoryAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizOpHistoryAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizOpHistoryAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizOpHistoryAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizOpHistoryAValidationError) ErrorName() string { return "BizOpHistoryAValidationError" }

// Error satisfies the builtin error interface
func (e BizOpHistoryAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizOpHistoryA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizOpHistoryAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizOpHistoryAValidationError{}

// Validate checks the field values on BizInfoA with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizInfoA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizInfoA with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizInfoAMultiError, or nil
// if none found.
func (m *BizInfoA) ValidateAll() error {
	return m.validate(true)
}

func (m *BizInfoA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizType

	// no validation rules for BizName

	// no validation rules for Remark

	// no validation rules for ExecType

	// no validation rules for CbBeforeCreate

	// no validation rules for CbBeforeRun

	// no validation rules for CbProcess

	// no validation rules for CbProcessStop

	// no validation rules for CbBeforeCreateTimeout

	// no validation rules for CbBeforeRunTimeout

	// no validation rules for CbProcessTimeout

	// no validation rules for CbProcessStopTimeout

	// no validation rules for RateType

	// no validation rules for RateSec

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizInfoAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return BizInfoAMultiError(errors)
	}

	return nil
}

// BizInfoAMultiError is an error wrapping multiple validation errors returned
// by BizInfoA.ValidateAll() if the designated constraints aren't met.
type BizInfoAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizInfoAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizInfoAMultiError) AllErrors() []error { return m }

// BizInfoAValidationError is the validation error returned by
// BizInfoA.Validate if the designated constraints aren't met.
type BizInfoAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizInfoAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizInfoAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizInfoAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizInfoAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizInfoAValidationError) ErrorName() string { return "BizInfoAValidationError" }

// Error satisfies the builtin error interface
func (e BizInfoAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizInfoA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizInfoAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizInfoAValidationError{}

// Validate checks the field values on JobBaseInfoA with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobBaseInfoA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobBaseInfoA with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobBaseInfoAMultiError, or
// nil if none found.
func (m *JobBaseInfoA) ValidateAll() error {
	return m.validate(true)
}

func (m *JobBaseInfoA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for BizType

	// no validation rules for BizData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedNum

	// no validation rules for ErrLogNum

	// no validation rules for Status

	// no validation rules for CreateTime

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobBaseInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobBaseInfoAValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobBaseInfoAValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	if len(errors) > 0 {
		return JobBaseInfoAMultiError(errors)
	}

	return nil
}

// JobBaseInfoAMultiError is an error wrapping multiple validation errors
// returned by JobBaseInfoA.ValidateAll() if the designated constraints aren't met.
type JobBaseInfoAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobBaseInfoAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobBaseInfoAMultiError) AllErrors() []error { return m }

// JobBaseInfoAValidationError is the validation error returned by
// JobBaseInfoA.Validate if the designated constraints aren't met.
type JobBaseInfoAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobBaseInfoAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobBaseInfoAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobBaseInfoAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobBaseInfoAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobBaseInfoAValidationError) ErrorName() string { return "JobBaseInfoAValidationError" }

// Error satisfies the builtin error interface
func (e JobBaseInfoAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobBaseInfoA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobBaseInfoAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobBaseInfoAValidationError{}

// Validate checks the field values on DataLogQ with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataLogQ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataLogQ with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataLogQMultiError, or nil
// if none found.
func (m *DataLogQ) ValidateAll() error {
	return m.validate(true)
}

func (m *DataLogQ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	// no validation rules for Remark

	// no validation rules for Extend

	// no validation rules for LogType

	if len(errors) > 0 {
		return DataLogQMultiError(errors)
	}

	return nil
}

// DataLogQMultiError is an error wrapping multiple validation errors returned
// by DataLogQ.ValidateAll() if the designated constraints aren't met.
type DataLogQMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataLogQMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataLogQMultiError) AllErrors() []error { return m }

// DataLogQValidationError is the validation error returned by
// DataLogQ.Validate if the designated constraints aren't met.
type DataLogQValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataLogQValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataLogQValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataLogQValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataLogQValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataLogQValidationError) ErrorName() string { return "DataLogQValidationError" }

// Error satisfies the builtin error interface
func (e DataLogQValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataLogQ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataLogQValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataLogQValidationError{}

// Validate checks the field values on DataLogA with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataLogA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataLogA with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataLogAMultiError, or nil
// if none found.
func (m *DataLogA) ValidateAll() error {
	return m.validate(true)
}

func (m *DataLogA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	// no validation rules for Remark

	// no validation rules for Extend

	// no validation rules for LogType

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return DataLogAMultiError(errors)
	}

	return nil
}

// DataLogAMultiError is an error wrapping multiple validation errors returned
// by DataLogA.ValidateAll() if the designated constraints aren't met.
type DataLogAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataLogAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataLogAMultiError) AllErrors() []error { return m }

// DataLogAValidationError is the validation error returned by
// DataLogA.Validate if the designated constraints aren't met.
type DataLogAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataLogAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataLogAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataLogAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataLogAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataLogAValidationError) ErrorName() string { return "DataLogAValidationError" }

// Error satisfies the builtin error interface
func (e DataLogAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataLogA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataLogAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataLogAValidationError{}

// Validate checks the field values on AdminCreateJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateJobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateJobReqMultiError, or nil if none found.
func (m *AdminCreateJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBizType() <= 0 {
		err := AdminCreateJobReqValidationError{
			field:  "BizType",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizData

	// no validation rules for BizProcessData

	// no validation rules for ProcessDataTotal

	// no validation rules for StartNow

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminCreateJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminCreateJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminCreateJobReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminCreateJobReqMultiError(errors)
	}

	return nil
}

// AdminCreateJobReqMultiError is an error wrapping multiple validation errors
// returned by AdminCreateJobReq.ValidateAll() if the designated constraints
// aren't met.
type AdminCreateJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateJobReqMultiError) AllErrors() []error { return m }

// AdminCreateJobReqValidationError is the validation error returned by
// AdminCreateJobReq.Validate if the designated constraints aren't met.
type AdminCreateJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateJobReqValidationError) ErrorName() string {
	return "AdminCreateJobReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateJobReqValidationError{}

// Validate checks the field values on AdminCreateJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateJobRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateJobRspMultiError, or nil if none found.
func (m *AdminCreateJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return AdminCreateJobRspMultiError(errors)
	}

	return nil
}

// AdminCreateJobRspMultiError is an error wrapping multiple validation errors
// returned by AdminCreateJobRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminCreateJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateJobRspMultiError) AllErrors() []error { return m }

// AdminCreateJobRspValidationError is the validation error returned by
// AdminCreateJobRsp.Validate if the designated constraints aren't met.
type AdminCreateJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateJobRspValidationError) ErrorName() string {
	return "AdminCreateJobRspValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateJobRspValidationError{}

// Validate checks the field values on AdminStartJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStartJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStartJobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStartJobReqMultiError, or nil if none found.
func (m *AdminStartJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStartJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := AdminStartJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminStartJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminStartJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminStartJobReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminStartJobReqMultiError(errors)
	}

	return nil
}

// AdminStartJobReqMultiError is an error wrapping multiple validation errors
// returned by AdminStartJobReq.ValidateAll() if the designated constraints
// aren't met.
type AdminStartJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStartJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStartJobReqMultiError) AllErrors() []error { return m }

// AdminStartJobReqValidationError is the validation error returned by
// AdminStartJobReq.Validate if the designated constraints aren't met.
type AdminStartJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStartJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStartJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStartJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStartJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStartJobReqValidationError) ErrorName() string { return "AdminStartJobReqValidationError" }

// Error satisfies the builtin error interface
func (e AdminStartJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStartJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStartJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStartJobReqValidationError{}

// Validate checks the field values on AdminStartJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStartJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStartJobRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStartJobRspMultiError, or nil if none found.
func (m *AdminStartJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStartJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminStartJobRspMultiError(errors)
	}

	return nil
}

// AdminStartJobRspMultiError is an error wrapping multiple validation errors
// returned by AdminStartJobRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminStartJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStartJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStartJobRspMultiError) AllErrors() []error { return m }

// AdminStartJobRspValidationError is the validation error returned by
// AdminStartJobRsp.Validate if the designated constraints aren't met.
type AdminStartJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStartJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStartJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStartJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStartJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStartJobRspValidationError) ErrorName() string { return "AdminStartJobRspValidationError" }

// Error satisfies the builtin error interface
func (e AdminStartJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStartJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStartJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStartJobRspValidationError{}

// Validate checks the field values on AdminStopJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStopJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStopJobReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStopJobReqMultiError, or nil if none found.
func (m *AdminStopJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStopJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := AdminStopJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminStopJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminStopJobReqValidationError{
					field:  "Op",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminStopJobReqValidationError{
				field:  "Op",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminStopJobReqMultiError(errors)
	}

	return nil
}

// AdminStopJobReqMultiError is an error wrapping multiple validation errors
// returned by AdminStopJobReq.ValidateAll() if the designated constraints
// aren't met.
type AdminStopJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStopJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStopJobReqMultiError) AllErrors() []error { return m }

// AdminStopJobReqValidationError is the validation error returned by
// AdminStopJobReq.Validate if the designated constraints aren't met.
type AdminStopJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStopJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStopJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStopJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStopJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStopJobReqValidationError) ErrorName() string { return "AdminStopJobReqValidationError" }

// Error satisfies the builtin error interface
func (e AdminStopJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStopJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStopJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStopJobReqValidationError{}

// Validate checks the field values on AdminStopJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminStopJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminStopJobRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminStopJobRspMultiError, or nil if none found.
func (m *AdminStopJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminStopJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminStopJobRspMultiError(errors)
	}

	return nil
}

// AdminStopJobRspMultiError is an error wrapping multiple validation errors
// returned by AdminStopJobRsp.ValidateAll() if the designated constraints
// aren't met.
type AdminStopJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminStopJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminStopJobRspMultiError) AllErrors() []error { return m }

// AdminStopJobRspValidationError is the validation error returned by
// AdminStopJobRsp.Validate if the designated constraints aren't met.
type AdminStopJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminStopJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminStopJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminStopJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminStopJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminStopJobRspValidationError) ErrorName() string { return "AdminStopJobRspValidationError" }

// Error satisfies the builtin error interface
func (e AdminStopJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminStopJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminStopJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminStopJobRspValidationError{}

// Validate checks the field values on QueryBizInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizInfoReqMultiError, or nil if none found.
func (m *QueryBizInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBizType() <= 0 {
		err := QueryBizInfoReqValidationError{
			field:  "BizType",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryBizInfoReqMultiError(errors)
	}

	return nil
}

// QueryBizInfoReqMultiError is an error wrapping multiple validation errors
// returned by QueryBizInfoReq.ValidateAll() if the designated constraints
// aren't met.
type QueryBizInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizInfoReqMultiError) AllErrors() []error { return m }

// QueryBizInfoReqValidationError is the validation error returned by
// QueryBizInfoReq.Validate if the designated constraints aren't met.
type QueryBizInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizInfoReqValidationError) ErrorName() string { return "QueryBizInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizInfoReqValidationError{}

// Validate checks the field values on QueryBizInfoRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizInfoRspMultiError, or nil if none found.
func (m *QueryBizInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryBizInfoRspValidationError{
					field:  "Line",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryBizInfoRspValidationError{
					field:  "Line",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryBizInfoRspValidationError{
				field:  "Line",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryBizInfoRspMultiError(errors)
	}

	return nil
}

// QueryBizInfoRspMultiError is an error wrapping multiple validation errors
// returned by QueryBizInfoRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryBizInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizInfoRspMultiError) AllErrors() []error { return m }

// QueryBizInfoRspValidationError is the validation error returned by
// QueryBizInfoRsp.Validate if the designated constraints aren't met.
type QueryBizInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizInfoRspValidationError) ErrorName() string { return "QueryBizInfoRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizInfoRspValidationError{}

// Validate checks the field values on QueryBizListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizListReqMultiError, or nil if none found.
func (m *QueryBizListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := QueryBizListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 5 {
		err := QueryBizListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OpUser

	// no validation rules for Status

	if len(errors) > 0 {
		return QueryBizListReqMultiError(errors)
	}

	return nil
}

// QueryBizListReqMultiError is an error wrapping multiple validation errors
// returned by QueryBizListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryBizListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizListReqMultiError) AllErrors() []error { return m }

// QueryBizListReqValidationError is the validation error returned by
// QueryBizListReq.Validate if the designated constraints aren't met.
type QueryBizListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizListReqValidationError) ErrorName() string { return "QueryBizListReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizListReqValidationError{}

// Validate checks the field values on QueryBizListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryBizListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBizListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBizListRspMultiError, or nil if none found.
func (m *QueryBizListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBizListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageSize

	for idx, item := range m.GetLine() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryBizListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryBizListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryBizListRspValidationError{
					field:  fmt.Sprintf("Line[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryBizListRspMultiError(errors)
	}

	return nil
}

// QueryBizListRspMultiError is an error wrapping multiple validation errors
// returned by QueryBizListRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryBizListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBizListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBizListRspMultiError) AllErrors() []error { return m }

// QueryBizListRspValidationError is the validation error returned by
// QueryBizListRsp.Validate if the designated constraints aren't met.
type QueryBizListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBizListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBizListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBizListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBizListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBizListRspValidationError) ErrorName() string { return "QueryBizListRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryBizListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBizListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBizListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBizListRspValidationError{}

// Validate checks the field values on QueryJobBaseInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobBaseInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobBaseInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobBaseInfoReqMultiError, or nil if none found.
func (m *QueryJobBaseInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobBaseInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := QueryJobBaseInfoReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryJobBaseInfoReqMultiError(errors)
	}

	return nil
}

// QueryJobBaseInfoReqMultiError is an error wrapping multiple validation
// errors returned by QueryJobBaseInfoReq.ValidateAll() if the designated
// constraints aren't met.
type QueryJobBaseInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobBaseInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobBaseInfoReqMultiError) AllErrors() []error { return m }

// QueryJobBaseInfoReqValidationError is the validation error returned by
// QueryJobBaseInfoReq.Validate if the designated constraints aren't met.
type QueryJobBaseInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobBaseInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobBaseInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobBaseInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobBaseInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobBaseInfoReqValidationError) ErrorName() string {
	return "QueryJobBaseInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobBaseInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobBaseInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobBaseInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobBaseInfoReqValidationError{}

// Validate checks the field values on QueryJobBaseInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobBaseInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobBaseInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobBaseInfoRspMultiError, or nil if none found.
func (m *QueryJobBaseInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobBaseInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryJobBaseInfoRspValidationError{
					field:  "BaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryJobBaseInfoRspValidationError{
					field:  "BaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryJobBaseInfoRspValidationError{
				field:  "BaseInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryJobBaseInfoRspMultiError(errors)
	}

	return nil
}

// QueryJobBaseInfoRspMultiError is an error wrapping multiple validation
// errors returned by QueryJobBaseInfoRsp.ValidateAll() if the designated
// constraints aren't met.
type QueryJobBaseInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobBaseInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobBaseInfoRspMultiError) AllErrors() []error { return m }

// QueryJobBaseInfoRspValidationError is the validation error returned by
// QueryJobBaseInfoRsp.Validate if the designated constraints aren't met.
type QueryJobBaseInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobBaseInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobBaseInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobBaseInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobBaseInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobBaseInfoRspValidationError) ErrorName() string {
	return "QueryJobBaseInfoRspValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobBaseInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobBaseInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobBaseInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobBaseInfoRspValidationError{}

// Validate checks the field values on QueryJobListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryJobListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobListReqMultiError, or nil if none found.
func (m *QueryJobListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for OpUser

	if len(m.GetBizType()) > 0 {

		_QueryJobListReq_BizType_Unique := make(map[int32]struct{}, len(m.GetBizType()))

		for idx, item := range m.GetBizType() {
			_, _ = idx, item

			if _, exists := _QueryJobListReq_BizType_Unique[item]; exists {
				err := QueryJobListReqValidationError{
					field:  fmt.Sprintf("BizType[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_QueryJobListReq_BizType_Unique[item] = struct{}{}
			}

			if item <= 0 {
				err := QueryJobListReqValidationError{
					field:  fmt.Sprintf("BizType[%v]", idx),
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.GetPage() <= 0 {
		err := QueryJobListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 5 {
		err := QueryJobListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryJobListReqMultiError(errors)
	}

	return nil
}

// QueryJobListReqMultiError is an error wrapping multiple validation errors
// returned by QueryJobListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryJobListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobListReqMultiError) AllErrors() []error { return m }

// QueryJobListReqValidationError is the validation error returned by
// QueryJobListReq.Validate if the designated constraints aren't met.
type QueryJobListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobListReqValidationError) ErrorName() string { return "QueryJobListReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryJobListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobListReqValidationError{}

// Validate checks the field values on QueryJobListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryJobListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobListRspMultiError, or nil if none found.
func (m *QueryJobListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageSize

	for idx, item := range m.GetLine() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryJobListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryJobListRspValidationError{
						field:  fmt.Sprintf("Line[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryJobListRspValidationError{
					field:  fmt.Sprintf("Line[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryJobListRspMultiError(errors)
	}

	return nil
}

// QueryJobListRspMultiError is an error wrapping multiple validation errors
// returned by QueryJobListRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryJobListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobListRspMultiError) AllErrors() []error { return m }

// QueryJobListRspValidationError is the validation error returned by
// QueryJobListRsp.Validate if the designated constraints aren't met.
type QueryJobListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobListRspValidationError) ErrorName() string { return "QueryJobListRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryJobListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobListRspValidationError{}

// Validate checks the field values on QueryJobDataLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobDataLogReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobDataLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobDataLogReqMultiError, or nil if none found.
func (m *QueryJobDataLogReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobDataLogReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := QueryJobDataLogReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := QueryJobDataLogReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 5 {
		err := QueryJobDataLogReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LogType

	if len(errors) > 0 {
		return QueryJobDataLogReqMultiError(errors)
	}

	return nil
}

// QueryJobDataLogReqMultiError is an error wrapping multiple validation errors
// returned by QueryJobDataLogReq.ValidateAll() if the designated constraints
// aren't met.
type QueryJobDataLogReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobDataLogReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobDataLogReqMultiError) AllErrors() []error { return m }

// QueryJobDataLogReqValidationError is the validation error returned by
// QueryJobDataLogReq.Validate if the designated constraints aren't met.
type QueryJobDataLogReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobDataLogReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobDataLogReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobDataLogReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobDataLogReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobDataLogReqValidationError) ErrorName() string {
	return "QueryJobDataLogReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobDataLogReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobDataLogReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobDataLogReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobDataLogReqValidationError{}

// Validate checks the field values on QueryJobDataLogRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryJobDataLogRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryJobDataLogRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryJobDataLogRspMultiError, or nil if none found.
func (m *QueryJobDataLogRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryJobDataLogRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageSize

	for idx, item := range m.GetLog() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryJobDataLogRspValidationError{
						field:  fmt.Sprintf("Log[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryJobDataLogRspValidationError{
						field:  fmt.Sprintf("Log[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryJobDataLogRspValidationError{
					field:  fmt.Sprintf("Log[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryJobDataLogRspMultiError(errors)
	}

	return nil
}

// QueryJobDataLogRspMultiError is an error wrapping multiple validation errors
// returned by QueryJobDataLogRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryJobDataLogRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryJobDataLogRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryJobDataLogRspMultiError) AllErrors() []error { return m }

// QueryJobDataLogRspValidationError is the validation error returned by
// QueryJobDataLogRsp.Validate if the designated constraints aren't met.
type QueryJobDataLogRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryJobDataLogRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryJobDataLogRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryJobDataLogRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryJobDataLogRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryJobDataLogRspValidationError) ErrorName() string {
	return "QueryJobDataLogRspValidationError"
}

// Error satisfies the builtin error interface
func (e QueryJobDataLogRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryJobDataLogRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryJobDataLogRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryJobDataLogRspValidationError{}

// Validate checks the field values on BizStartJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStartJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStartJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStartJobReqMultiError,
// or nil if none found.
func (m *BizStartJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStartJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizStartJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BizStartJobReqMultiError(errors)
	}

	return nil
}

// BizStartJobReqMultiError is an error wrapping multiple validation errors
// returned by BizStartJobReq.ValidateAll() if the designated constraints
// aren't met.
type BizStartJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStartJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStartJobReqMultiError) AllErrors() []error { return m }

// BizStartJobReqValidationError is the validation error returned by
// BizStartJobReq.Validate if the designated constraints aren't met.
type BizStartJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStartJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStartJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStartJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStartJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStartJobReqValidationError) ErrorName() string { return "BizStartJobReqValidationError" }

// Error satisfies the builtin error interface
func (e BizStartJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStartJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStartJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStartJobReqValidationError{}

// Validate checks the field values on BizStartJobRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStartJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStartJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStartJobRspMultiError,
// or nil if none found.
func (m *BizStartJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStartJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizStartJobRspMultiError(errors)
	}

	return nil
}

// BizStartJobRspMultiError is an error wrapping multiple validation errors
// returned by BizStartJobRsp.ValidateAll() if the designated constraints
// aren't met.
type BizStartJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStartJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStartJobRspMultiError) AllErrors() []error { return m }

// BizStartJobRspValidationError is the validation error returned by
// BizStartJobRsp.Validate if the designated constraints aren't met.
type BizStartJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStartJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStartJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStartJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStartJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStartJobRspValidationError) ErrorName() string { return "BizStartJobRspValidationError" }

// Error satisfies the builtin error interface
func (e BizStartJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStartJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStartJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStartJobRspValidationError{}

// Validate checks the field values on BizStopJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStopJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStopJobReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStopJobReqMultiError, or
// nil if none found.
func (m *BizStopJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStopJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizStopJobReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BizStopJobReqMultiError(errors)
	}

	return nil
}

// BizStopJobReqMultiError is an error wrapping multiple validation errors
// returned by BizStopJobReq.ValidateAll() if the designated constraints
// aren't met.
type BizStopJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStopJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStopJobReqMultiError) AllErrors() []error { return m }

// BizStopJobReqValidationError is the validation error returned by
// BizStopJobReq.Validate if the designated constraints aren't met.
type BizStopJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStopJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStopJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStopJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStopJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStopJobReqValidationError) ErrorName() string { return "BizStopJobReqValidationError" }

// Error satisfies the builtin error interface
func (e BizStopJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStopJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStopJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStopJobReqValidationError{}

// Validate checks the field values on BizStopJobRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizStopJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizStopJobRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizStopJobRspMultiError, or
// nil if none found.
func (m *BizStopJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizStopJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizStopJobRspMultiError(errors)
	}

	return nil
}

// BizStopJobRspMultiError is an error wrapping multiple validation errors
// returned by BizStopJobRsp.ValidateAll() if the designated constraints
// aren't met.
type BizStopJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizStopJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizStopJobRspMultiError) AllErrors() []error { return m }

// BizStopJobRspValidationError is the validation error returned by
// BizStopJobRsp.Validate if the designated constraints aren't met.
type BizStopJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizStopJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizStopJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizStopJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizStopJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizStopJobRspValidationError) ErrorName() string { return "BizStopJobRspValidationError" }

// Error satisfies the builtin error interface
func (e BizStopJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizStopJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizStopJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizStopJobRspValidationError{}

// Validate checks the field values on BizUpdateBizDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BizUpdateBizDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizUpdateBizDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizUpdateBizDataReqMultiError, or nil if none found.
func (m *BizUpdateBizDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizUpdateBizDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizUpdateBizDataReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizData

	// no validation rules for BizProcessData

	// no validation rules for ProcessDataTotal

	// no validation rules for ProcessedNum

	if len(errors) > 0 {
		return BizUpdateBizDataReqMultiError(errors)
	}

	return nil
}

// BizUpdateBizDataReqMultiError is an error wrapping multiple validation
// errors returned by BizUpdateBizDataReq.ValidateAll() if the designated
// constraints aren't met.
type BizUpdateBizDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizUpdateBizDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizUpdateBizDataReqMultiError) AllErrors() []error { return m }

// BizUpdateBizDataReqValidationError is the validation error returned by
// BizUpdateBizDataReq.Validate if the designated constraints aren't met.
type BizUpdateBizDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizUpdateBizDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizUpdateBizDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizUpdateBizDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizUpdateBizDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizUpdateBizDataReqValidationError) ErrorName() string {
	return "BizUpdateBizDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e BizUpdateBizDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizUpdateBizDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizUpdateBizDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizUpdateBizDataReqValidationError{}

// Validate checks the field values on BizUpdateBizDataRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BizUpdateBizDataRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizUpdateBizDataRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizUpdateBizDataRspMultiError, or nil if none found.
func (m *BizUpdateBizDataRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizUpdateBizDataRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizUpdateBizDataRspMultiError(errors)
	}

	return nil
}

// BizUpdateBizDataRspMultiError is an error wrapping multiple validation
// errors returned by BizUpdateBizDataRsp.ValidateAll() if the designated
// constraints aren't met.
type BizUpdateBizDataRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizUpdateBizDataRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizUpdateBizDataRspMultiError) AllErrors() []error { return m }

// BizUpdateBizDataRspValidationError is the validation error returned by
// BizUpdateBizDataRsp.Validate if the designated constraints aren't met.
type BizUpdateBizDataRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizUpdateBizDataRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizUpdateBizDataRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizUpdateBizDataRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizUpdateBizDataRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizUpdateBizDataRspValidationError) ErrorName() string {
	return "BizUpdateBizDataRspValidationError"
}

// Error satisfies the builtin error interface
func (e BizUpdateBizDataRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizUpdateBizDataRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizUpdateBizDataRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizUpdateBizDataRspValidationError{}

// Validate checks the field values on BizIncrProcessedNumReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BizIncrProcessedNumReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizIncrProcessedNumReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizIncrProcessedNumReqMultiError, or nil if none found.
func (m *BizIncrProcessedNumReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizIncrProcessedNumReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizIncrProcessedNumReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNum() <= 0 {
		err := BizIncrProcessedNumReqValidationError{
			field:  "Num",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BizIncrProcessedNumReqMultiError(errors)
	}

	return nil
}

// BizIncrProcessedNumReqMultiError is an error wrapping multiple validation
// errors returned by BizIncrProcessedNumReq.ValidateAll() if the designated
// constraints aren't met.
type BizIncrProcessedNumReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizIncrProcessedNumReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizIncrProcessedNumReqMultiError) AllErrors() []error { return m }

// BizIncrProcessedNumReqValidationError is the validation error returned by
// BizIncrProcessedNumReq.Validate if the designated constraints aren't met.
type BizIncrProcessedNumReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizIncrProcessedNumReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizIncrProcessedNumReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizIncrProcessedNumReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizIncrProcessedNumReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizIncrProcessedNumReqValidationError) ErrorName() string {
	return "BizIncrProcessedNumReqValidationError"
}

// Error satisfies the builtin error interface
func (e BizIncrProcessedNumReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizIncrProcessedNumReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizIncrProcessedNumReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizIncrProcessedNumReqValidationError{}

// Validate checks the field values on BizIncrProcessedNumRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BizIncrProcessedNumRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizIncrProcessedNumRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizIncrProcessedNumRspMultiError, or nil if none found.
func (m *BizIncrProcessedNumRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizIncrProcessedNumRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizIncrProcessedNumRspMultiError(errors)
	}

	return nil
}

// BizIncrProcessedNumRspMultiError is an error wrapping multiple validation
// errors returned by BizIncrProcessedNumRsp.ValidateAll() if the designated
// constraints aren't met.
type BizIncrProcessedNumRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizIncrProcessedNumRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizIncrProcessedNumRspMultiError) AllErrors() []error { return m }

// BizIncrProcessedNumRspValidationError is the validation error returned by
// BizIncrProcessedNumRsp.Validate if the designated constraints aren't met.
type BizIncrProcessedNumRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizIncrProcessedNumRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizIncrProcessedNumRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizIncrProcessedNumRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizIncrProcessedNumRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizIncrProcessedNumRspValidationError) ErrorName() string {
	return "BizIncrProcessedNumRspValidationError"
}

// Error satisfies the builtin error interface
func (e BizIncrProcessedNumRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizIncrProcessedNumRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizIncrProcessedNumRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizIncrProcessedNumRspValidationError{}

// Validate checks the field values on BizAddDataLogReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BizAddDataLogReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizAddDataLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizAddDataLogReqMultiError, or nil if none found.
func (m *BizAddDataLogReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BizAddDataLogReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() <= 0 {
		err := BizAddDataLogReqValidationError{
			field:  "JobId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetLog() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BizAddDataLogReqValidationError{
						field:  fmt.Sprintf("Log[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BizAddDataLogReqValidationError{
						field:  fmt.Sprintf("Log[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BizAddDataLogReqValidationError{
					field:  fmt.Sprintf("Log[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BizAddDataLogReqMultiError(errors)
	}

	return nil
}

// BizAddDataLogReqMultiError is an error wrapping multiple validation errors
// returned by BizAddDataLogReq.ValidateAll() if the designated constraints
// aren't met.
type BizAddDataLogReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizAddDataLogReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizAddDataLogReqMultiError) AllErrors() []error { return m }

// BizAddDataLogReqValidationError is the validation error returned by
// BizAddDataLogReq.Validate if the designated constraints aren't met.
type BizAddDataLogReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizAddDataLogReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizAddDataLogReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizAddDataLogReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizAddDataLogReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizAddDataLogReqValidationError) ErrorName() string { return "BizAddDataLogReqValidationError" }

// Error satisfies the builtin error interface
func (e BizAddDataLogReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizAddDataLogReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizAddDataLogReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizAddDataLogReqValidationError{}

// Validate checks the field values on BizAddDataLogRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BizAddDataLogRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizAddDataLogRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BizAddDataLogRspMultiError, or nil if none found.
func (m *BizAddDataLogRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BizAddDataLogRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BizAddDataLogRspMultiError(errors)
	}

	return nil
}

// BizAddDataLogRspMultiError is an error wrapping multiple validation errors
// returned by BizAddDataLogRsp.ValidateAll() if the designated constraints
// aren't met.
type BizAddDataLogRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizAddDataLogRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizAddDataLogRspMultiError) AllErrors() []error { return m }

// BizAddDataLogRspValidationError is the validation error returned by
// BizAddDataLogRsp.Validate if the designated constraints aren't met.
type BizAddDataLogRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizAddDataLogRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizAddDataLogRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizAddDataLogRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizAddDataLogRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizAddDataLogRspValidationError) ErrorName() string { return "BizAddDataLogRspValidationError" }

// Error satisfies the builtin error interface
func (e BizAddDataLogRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizAddDataLogRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizAddDataLogRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizAddDataLogRspValidationError{}
