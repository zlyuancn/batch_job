// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: batch_job.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommonButtonService_AdminRegistryBiz_FullMethodName    = "/batch_job.CommonButtonService/AdminRegistryBiz"
	CommonButtonService_AdminCreateJob_FullMethodName      = "/batch_job.CommonButtonService/AdminCreateJob"
	CommonButtonService_AdminStartJob_FullMethodName       = "/batch_job.CommonButtonService/AdminStartJob"
	CommonButtonService_AdminStopJob_FullMethodName        = "/batch_job.CommonButtonService/AdminStopJob"
	CommonButtonService_QueryBizInfo_FullMethodName        = "/batch_job.CommonButtonService/QueryBizInfo"
	CommonButtonService_QueryBizList_FullMethodName        = "/batch_job.CommonButtonService/QueryBizList"
	CommonButtonService_QueryJobBaseInfo_FullMethodName    = "/batch_job.CommonButtonService/QueryJobBaseInfo"
	CommonButtonService_QueryJobList_FullMethodName        = "/batch_job.CommonButtonService/QueryJobList"
	CommonButtonService_QueryJobDataLog_FullMethodName     = "/batch_job.CommonButtonService/QueryJobDataLog"
	CommonButtonService_BizStartJob_FullMethodName         = "/batch_job.CommonButtonService/BizStartJob"
	CommonButtonService_BizStopJob_FullMethodName          = "/batch_job.CommonButtonService/BizStopJob"
	CommonButtonService_BizUpdateBizData_FullMethodName    = "/batch_job.CommonButtonService/BizUpdateBizData"
	CommonButtonService_BizIncrProcessedNum_FullMethodName = "/batch_job.CommonButtonService/BizIncrProcessedNum"
	CommonButtonService_BizAddDataLog_FullMethodName       = "/batch_job.CommonButtonService/BizAddDataLog"
)

// CommonButtonServiceClient is the client API for CommonButtonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonButtonServiceClient interface {
	// 业务注册
	AdminRegistryBiz(ctx context.Context, in *AdminRegistryBizReq, opts ...grpc.CallOption) (*AdminRegistryBizRsp, error)
	// 创建任务
	AdminCreateJob(ctx context.Context, in *AdminCreateJobReq, opts ...grpc.CallOption) (*AdminCreateJobRsp, error)
	// 启动任务
	AdminStartJob(ctx context.Context, in *AdminStartJobReq, opts ...grpc.CallOption) (*AdminStartJobRsp, error)
	// 停止任务
	AdminStopJob(ctx context.Context, in *AdminStopJobReq, opts ...grpc.CallOption) (*AdminStopJobRsp, error)
	// 查询业务信息
	QueryBizInfo(ctx context.Context, in *QueryBizInfoReq, opts ...grpc.CallOption) (*QueryBizInfoRsp, error)
	// 查询业务列表
	QueryBizList(ctx context.Context, in *QueryBizListReq, opts ...grpc.CallOption) (*QueryBizListRsp, error)
	// 查询任务基本信息
	QueryJobBaseInfo(ctx context.Context, in *QueryJobBaseInfoReq, opts ...grpc.CallOption) (*QueryJobBaseInfoRsp, error)
	// 查询任务列表
	QueryJobList(ctx context.Context, in *QueryJobListReq, opts ...grpc.CallOption) (*QueryJobListRsp, error)
	// 查询任务的数据日志
	QueryJobDataLog(ctx context.Context, in *QueryJobDataLogReq, opts ...grpc.CallOption) (*QueryJobDataLogRsp, error)
	// 业务启动. 要求任务必须处于 JobStatus.WaitBizRun 状态
	BizStartJob(ctx context.Context, in *BizStartJobReq, opts ...grpc.CallOption) (*BizStartJobRsp, error)
	// 要求业务停止运行. 一般为业务判断任务无法继续的时候
	BizStopJob(ctx context.Context, in *BizStopJobReq, opts ...grpc.CallOption) (*BizStopJobRsp, error)
	// 更新业务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态或者串行化速率类型的任务可以使用
	BizUpdateBizData(ctx context.Context, in *BizUpdateBizDataReq, opts ...grpc.CallOption) (*BizUpdateBizDataRsp, error)
	// 增加已处理数
	BizIncrProcessedNum(ctx context.Context, in *BizIncrProcessedNumReq, opts ...grpc.CallOption) (*BizIncrProcessedNumRsp, error)
	// 增加数据日志
	BizAddDataLog(ctx context.Context, in *BizAddDataLogReq, opts ...grpc.CallOption) (*BizAddDataLogRsp, error)
}

type commonButtonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonButtonServiceClient(cc grpc.ClientConnInterface) CommonButtonServiceClient {
	return &commonButtonServiceClient{cc}
}

func (c *commonButtonServiceClient) AdminRegistryBiz(ctx context.Context, in *AdminRegistryBizReq, opts ...grpc.CallOption) (*AdminRegistryBizRsp, error) {
	out := new(AdminRegistryBizRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_AdminRegistryBiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) AdminCreateJob(ctx context.Context, in *AdminCreateJobReq, opts ...grpc.CallOption) (*AdminCreateJobRsp, error) {
	out := new(AdminCreateJobRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_AdminCreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) AdminStartJob(ctx context.Context, in *AdminStartJobReq, opts ...grpc.CallOption) (*AdminStartJobRsp, error) {
	out := new(AdminStartJobRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_AdminStartJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) AdminStopJob(ctx context.Context, in *AdminStopJobReq, opts ...grpc.CallOption) (*AdminStopJobRsp, error) {
	out := new(AdminStopJobRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_AdminStopJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) QueryBizInfo(ctx context.Context, in *QueryBizInfoReq, opts ...grpc.CallOption) (*QueryBizInfoRsp, error) {
	out := new(QueryBizInfoRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_QueryBizInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) QueryBizList(ctx context.Context, in *QueryBizListReq, opts ...grpc.CallOption) (*QueryBizListRsp, error) {
	out := new(QueryBizListRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_QueryBizList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) QueryJobBaseInfo(ctx context.Context, in *QueryJobBaseInfoReq, opts ...grpc.CallOption) (*QueryJobBaseInfoRsp, error) {
	out := new(QueryJobBaseInfoRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_QueryJobBaseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) QueryJobList(ctx context.Context, in *QueryJobListReq, opts ...grpc.CallOption) (*QueryJobListRsp, error) {
	out := new(QueryJobListRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_QueryJobList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) QueryJobDataLog(ctx context.Context, in *QueryJobDataLogReq, opts ...grpc.CallOption) (*QueryJobDataLogRsp, error) {
	out := new(QueryJobDataLogRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_QueryJobDataLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) BizStartJob(ctx context.Context, in *BizStartJobReq, opts ...grpc.CallOption) (*BizStartJobRsp, error) {
	out := new(BizStartJobRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_BizStartJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) BizStopJob(ctx context.Context, in *BizStopJobReq, opts ...grpc.CallOption) (*BizStopJobRsp, error) {
	out := new(BizStopJobRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_BizStopJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) BizUpdateBizData(ctx context.Context, in *BizUpdateBizDataReq, opts ...grpc.CallOption) (*BizUpdateBizDataRsp, error) {
	out := new(BizUpdateBizDataRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_BizUpdateBizData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) BizIncrProcessedNum(ctx context.Context, in *BizIncrProcessedNumReq, opts ...grpc.CallOption) (*BizIncrProcessedNumRsp, error) {
	out := new(BizIncrProcessedNumRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_BizIncrProcessedNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) BizAddDataLog(ctx context.Context, in *BizAddDataLogReq, opts ...grpc.CallOption) (*BizAddDataLogRsp, error) {
	out := new(BizAddDataLogRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_BizAddDataLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonButtonServiceServer is the server API for CommonButtonService service.
// All implementations must embed UnimplementedCommonButtonServiceServer
// for forward compatibility
type CommonButtonServiceServer interface {
	// 业务注册
	AdminRegistryBiz(context.Context, *AdminRegistryBizReq) (*AdminRegistryBizRsp, error)
	// 创建任务
	AdminCreateJob(context.Context, *AdminCreateJobReq) (*AdminCreateJobRsp, error)
	// 启动任务
	AdminStartJob(context.Context, *AdminStartJobReq) (*AdminStartJobRsp, error)
	// 停止任务
	AdminStopJob(context.Context, *AdminStopJobReq) (*AdminStopJobRsp, error)
	// 查询业务信息
	QueryBizInfo(context.Context, *QueryBizInfoReq) (*QueryBizInfoRsp, error)
	// 查询业务列表
	QueryBizList(context.Context, *QueryBizListReq) (*QueryBizListRsp, error)
	// 查询任务基本信息
	QueryJobBaseInfo(context.Context, *QueryJobBaseInfoReq) (*QueryJobBaseInfoRsp, error)
	// 查询任务列表
	QueryJobList(context.Context, *QueryJobListReq) (*QueryJobListRsp, error)
	// 查询任务的数据日志
	QueryJobDataLog(context.Context, *QueryJobDataLogReq) (*QueryJobDataLogRsp, error)
	// 业务启动. 要求任务必须处于 JobStatus.WaitBizRun 状态
	BizStartJob(context.Context, *BizStartJobReq) (*BizStartJobRsp, error)
	// 要求业务停止运行. 一般为业务判断任务无法继续的时候
	BizStopJob(context.Context, *BizStopJobReq) (*BizStopJobRsp, error)
	// 更新业务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态或者串行化速率类型的任务可以使用
	BizUpdateBizData(context.Context, *BizUpdateBizDataReq) (*BizUpdateBizDataRsp, error)
	// 增加已处理数
	BizIncrProcessedNum(context.Context, *BizIncrProcessedNumReq) (*BizIncrProcessedNumRsp, error)
	// 增加数据日志
	BizAddDataLog(context.Context, *BizAddDataLogReq) (*BizAddDataLogRsp, error)
	mustEmbedUnimplementedCommonButtonServiceServer()
}

// UnimplementedCommonButtonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommonButtonServiceServer struct {
}

func (UnimplementedCommonButtonServiceServer) AdminRegistryBiz(context.Context, *AdminRegistryBizReq) (*AdminRegistryBizRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRegistryBiz not implemented")
}
func (UnimplementedCommonButtonServiceServer) AdminCreateJob(context.Context, *AdminCreateJobReq) (*AdminCreateJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateJob not implemented")
}
func (UnimplementedCommonButtonServiceServer) AdminStartJob(context.Context, *AdminStartJobReq) (*AdminStartJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminStartJob not implemented")
}
func (UnimplementedCommonButtonServiceServer) AdminStopJob(context.Context, *AdminStopJobReq) (*AdminStopJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminStopJob not implemented")
}
func (UnimplementedCommonButtonServiceServer) QueryBizInfo(context.Context, *QueryBizInfoReq) (*QueryBizInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBizInfo not implemented")
}
func (UnimplementedCommonButtonServiceServer) QueryBizList(context.Context, *QueryBizListReq) (*QueryBizListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBizList not implemented")
}
func (UnimplementedCommonButtonServiceServer) QueryJobBaseInfo(context.Context, *QueryJobBaseInfoReq) (*QueryJobBaseInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobBaseInfo not implemented")
}
func (UnimplementedCommonButtonServiceServer) QueryJobList(context.Context, *QueryJobListReq) (*QueryJobListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobList not implemented")
}
func (UnimplementedCommonButtonServiceServer) QueryJobDataLog(context.Context, *QueryJobDataLogReq) (*QueryJobDataLogRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobDataLog not implemented")
}
func (UnimplementedCommonButtonServiceServer) BizStartJob(context.Context, *BizStartJobReq) (*BizStartJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizStartJob not implemented")
}
func (UnimplementedCommonButtonServiceServer) BizStopJob(context.Context, *BizStopJobReq) (*BizStopJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizStopJob not implemented")
}
func (UnimplementedCommonButtonServiceServer) BizUpdateBizData(context.Context, *BizUpdateBizDataReq) (*BizUpdateBizDataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizUpdateBizData not implemented")
}
func (UnimplementedCommonButtonServiceServer) BizIncrProcessedNum(context.Context, *BizIncrProcessedNumReq) (*BizIncrProcessedNumRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizIncrProcessedNum not implemented")
}
func (UnimplementedCommonButtonServiceServer) BizAddDataLog(context.Context, *BizAddDataLogReq) (*BizAddDataLogRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizAddDataLog not implemented")
}
func (UnimplementedCommonButtonServiceServer) mustEmbedUnimplementedCommonButtonServiceServer() {}

// UnsafeCommonButtonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonButtonServiceServer will
// result in compilation errors.
type UnsafeCommonButtonServiceServer interface {
	mustEmbedUnimplementedCommonButtonServiceServer()
}

func RegisterCommonButtonServiceServer(s grpc.ServiceRegistrar, srv CommonButtonServiceServer) {
	s.RegisterService(&CommonButtonService_ServiceDesc, srv)
}

func _CommonButtonService_AdminRegistryBiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRegistryBizReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).AdminRegistryBiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_AdminRegistryBiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).AdminRegistryBiz(ctx, req.(*AdminRegistryBizReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_AdminCreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).AdminCreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_AdminCreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).AdminCreateJob(ctx, req.(*AdminCreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_AdminStartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStartJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).AdminStartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_AdminStartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).AdminStartJob(ctx, req.(*AdminStartJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_AdminStopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStopJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).AdminStopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_AdminStopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).AdminStopJob(ctx, req.(*AdminStopJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_QueryBizInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBizInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).QueryBizInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_QueryBizInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).QueryBizInfo(ctx, req.(*QueryBizInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_QueryBizList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBizListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).QueryBizList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_QueryBizList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).QueryBizList(ctx, req.(*QueryBizListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_QueryJobBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).QueryJobBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_QueryJobBaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).QueryJobBaseInfo(ctx, req.(*QueryJobBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_QueryJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).QueryJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_QueryJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).QueryJobList(ctx, req.(*QueryJobListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_QueryJobDataLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobDataLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).QueryJobDataLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_QueryJobDataLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).QueryJobDataLog(ctx, req.(*QueryJobDataLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_BizStartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizStartJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).BizStartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_BizStartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).BizStartJob(ctx, req.(*BizStartJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_BizStopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizStopJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).BizStopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_BizStopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).BizStopJob(ctx, req.(*BizStopJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_BizUpdateBizData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizUpdateBizDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).BizUpdateBizData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_BizUpdateBizData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).BizUpdateBizData(ctx, req.(*BizUpdateBizDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_BizIncrProcessedNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizIncrProcessedNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).BizIncrProcessedNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_BizIncrProcessedNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).BizIncrProcessedNum(ctx, req.(*BizIncrProcessedNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_BizAddDataLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizAddDataLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).BizAddDataLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_BizAddDataLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).BizAddDataLog(ctx, req.(*BizAddDataLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonButtonService_ServiceDesc is the grpc.ServiceDesc for CommonButtonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonButtonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batch_job.CommonButtonService",
	HandlerType: (*CommonButtonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminRegistryBiz",
			Handler:    _CommonButtonService_AdminRegistryBiz_Handler,
		},
		{
			MethodName: "AdminCreateJob",
			Handler:    _CommonButtonService_AdminCreateJob_Handler,
		},
		{
			MethodName: "AdminStartJob",
			Handler:    _CommonButtonService_AdminStartJob_Handler,
		},
		{
			MethodName: "AdminStopJob",
			Handler:    _CommonButtonService_AdminStopJob_Handler,
		},
		{
			MethodName: "QueryBizInfo",
			Handler:    _CommonButtonService_QueryBizInfo_Handler,
		},
		{
			MethodName: "QueryBizList",
			Handler:    _CommonButtonService_QueryBizList_Handler,
		},
		{
			MethodName: "QueryJobBaseInfo",
			Handler:    _CommonButtonService_QueryJobBaseInfo_Handler,
		},
		{
			MethodName: "QueryJobList",
			Handler:    _CommonButtonService_QueryJobList_Handler,
		},
		{
			MethodName: "QueryJobDataLog",
			Handler:    _CommonButtonService_QueryJobDataLog_Handler,
		},
		{
			MethodName: "BizStartJob",
			Handler:    _CommonButtonService_BizStartJob_Handler,
		},
		{
			MethodName: "BizStopJob",
			Handler:    _CommonButtonService_BizStopJob_Handler,
		},
		{
			MethodName: "BizUpdateBizData",
			Handler:    _CommonButtonService_BizUpdateBizData_Handler,
		},
		{
			MethodName: "BizIncrProcessedNum",
			Handler:    _CommonButtonService_BizIncrProcessedNum_Handler,
		},
		{
			MethodName: "BizAddDataLog",
			Handler:    _CommonButtonService_BizAddDataLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batch_job.proto",
}
