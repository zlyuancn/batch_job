// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.1
// source: batch_job.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BatchJobService_AdminRegistryBiz_FullMethodName  = "/batch_job.BatchJobService/AdminRegistryBiz"
	BatchJobService_AdminChangeBiz_FullMethodName    = "/batch_job.BatchJobService/AdminChangeBiz"
	BatchJobService_AdminCreateJob_FullMethodName    = "/batch_job.BatchJobService/AdminCreateJob"
	BatchJobService_AdminChangeJob_FullMethodName    = "/batch_job.BatchJobService/AdminChangeJob"
	BatchJobService_AdminStartJob_FullMethodName     = "/batch_job.BatchJobService/AdminStartJob"
	BatchJobService_AdminStopJob_FullMethodName      = "/batch_job.BatchJobService/AdminStopJob"
	BatchJobService_QueryAllBizName_FullMethodName   = "/batch_job.BatchJobService/QueryAllBizName"
	BatchJobService_QueryBizInfo_FullMethodName      = "/batch_job.BatchJobService/QueryBizInfo"
	BatchJobService_QueryBizList_FullMethodName      = "/batch_job.BatchJobService/QueryBizList"
	BatchJobService_QueryJobInfo_FullMethodName      = "/batch_job.BatchJobService/QueryJobInfo"
	BatchJobService_QueryJobList_FullMethodName      = "/batch_job.BatchJobService/QueryJobList"
	BatchJobService_QueryJobStateInfo_FullMethodName = "/batch_job.BatchJobService/QueryJobStateInfo"
	BatchJobService_QueryJobDataLog_FullMethodName   = "/batch_job.BatchJobService/QueryJobDataLog"
	BatchJobService_BizStartJob_FullMethodName       = "/batch_job.BatchJobService/BizStartJob"
	BatchJobService_BizStopJob_FullMethodName        = "/batch_job.BatchJobService/BizStopJob"
	BatchJobService_BizUpdateJobData_FullMethodName  = "/batch_job.BatchJobService/BizUpdateJobData"
	BatchJobService_BizAddDataLog_FullMethodName     = "/batch_job.BatchJobService/BizAddDataLog"
)

// BatchJobServiceClient is the client API for BatchJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 批量任务服务
type BatchJobServiceClient interface {
	// 业务注册
	AdminRegistryBiz(ctx context.Context, in *AdminRegistryBizReq, opts ...grpc.CallOption) (*AdminRegistryBizRsp, error)
	// 修改业务
	AdminChangeBiz(ctx context.Context, in *AdminChangeBizReq, opts ...grpc.CallOption) (*AdminChangeBizRsp, error)
	// 创建任务
	AdminCreateJob(ctx context.Context, in *AdminCreateJobReq, opts ...grpc.CallOption) (*AdminCreateJobRsp, error)
	// 修改任务
	AdminChangeJob(ctx context.Context, in *AdminChangeJobReq, opts ...grpc.CallOption) (*AdminChangeJobRsp, error)
	// 启动任务
	AdminStartJob(ctx context.Context, in *AdminStartJobReq, opts ...grpc.CallOption) (*AdminStartJobRsp, error)
	// 停止任务
	AdminStopJob(ctx context.Context, in *AdminStopJobReq, opts ...grpc.CallOption) (*AdminStopJobRsp, error)
	// 查询所有业务名
	QueryAllBizName(ctx context.Context, in *QueryAllBizNameReq, opts ...grpc.CallOption) (*QueryAllBizNameRsp, error)
	// 查询业务信息
	QueryBizInfo(ctx context.Context, in *QueryBizInfoReq, opts ...grpc.CallOption) (*QueryBizInfoRsp, error)
	// 查询业务列表
	QueryBizList(ctx context.Context, in *QueryBizListReq, opts ...grpc.CallOption) (*QueryBizListRsp, error)
	// 查询任务基本信息
	QueryJobInfo(ctx context.Context, in *QueryJobInfoReq, opts ...grpc.CallOption) (*QueryJobInfoRsp, error)
	// 查询任务列表
	QueryJobList(ctx context.Context, in *QueryJobListReq, opts ...grpc.CallOption) (*QueryJobListRsp, error)
	// 查询任务状态信息, 用于获取运行中的任务的变化数据
	QueryJobStateInfo(ctx context.Context, in *QueryJobStateInfoReq, opts ...grpc.CallOption) (*QueryJobStateInfoRsp, error)
	// 查询任务的数据日志
	QueryJobDataLog(ctx context.Context, in *QueryJobDataLogReq, opts ...grpc.CallOption) (*QueryJobDataLogRsp, error)
	// 业务启动. 要求任务必须处于 JobStatus.WaitBizRun 状态
	BizStartJob(ctx context.Context, in *BizStartJobReq, opts ...grpc.CallOption) (*BizStartJobRsp, error)
	// 要求业务停止运行. 一般为业务判断任务无法继续的时候
	BizStopJob(ctx context.Context, in *BizStopJobReq, opts ...grpc.CallOption) (*BizStopJobRsp, error)
	// 更新任务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态可以使用
	BizUpdateJobData(ctx context.Context, in *BizUpdateJobDataReq, opts ...grpc.CallOption) (*BizUpdateJobDataRsp, error)
	// 增加数据日志
	BizAddDataLog(ctx context.Context, in *BizAddDataLogReq, opts ...grpc.CallOption) (*BizAddDataLogRsp, error)
}

type batchJobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchJobServiceClient(cc grpc.ClientConnInterface) BatchJobServiceClient {
	return &batchJobServiceClient{cc}
}

func (c *batchJobServiceClient) AdminRegistryBiz(ctx context.Context, in *AdminRegistryBizReq, opts ...grpc.CallOption) (*AdminRegistryBizRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminRegistryBizRsp)
	err := c.cc.Invoke(ctx, BatchJobService_AdminRegistryBiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) AdminChangeBiz(ctx context.Context, in *AdminChangeBizReq, opts ...grpc.CallOption) (*AdminChangeBizRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminChangeBizRsp)
	err := c.cc.Invoke(ctx, BatchJobService_AdminChangeBiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) AdminCreateJob(ctx context.Context, in *AdminCreateJobReq, opts ...grpc.CallOption) (*AdminCreateJobRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminCreateJobRsp)
	err := c.cc.Invoke(ctx, BatchJobService_AdminCreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) AdminChangeJob(ctx context.Context, in *AdminChangeJobReq, opts ...grpc.CallOption) (*AdminChangeJobRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminChangeJobRsp)
	err := c.cc.Invoke(ctx, BatchJobService_AdminChangeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) AdminStartJob(ctx context.Context, in *AdminStartJobReq, opts ...grpc.CallOption) (*AdminStartJobRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminStartJobRsp)
	err := c.cc.Invoke(ctx, BatchJobService_AdminStartJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) AdminStopJob(ctx context.Context, in *AdminStopJobReq, opts ...grpc.CallOption) (*AdminStopJobRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminStopJobRsp)
	err := c.cc.Invoke(ctx, BatchJobService_AdminStopJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) QueryAllBizName(ctx context.Context, in *QueryAllBizNameReq, opts ...grpc.CallOption) (*QueryAllBizNameRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAllBizNameRsp)
	err := c.cc.Invoke(ctx, BatchJobService_QueryAllBizName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) QueryBizInfo(ctx context.Context, in *QueryBizInfoReq, opts ...grpc.CallOption) (*QueryBizInfoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBizInfoRsp)
	err := c.cc.Invoke(ctx, BatchJobService_QueryBizInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) QueryBizList(ctx context.Context, in *QueryBizListReq, opts ...grpc.CallOption) (*QueryBizListRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBizListRsp)
	err := c.cc.Invoke(ctx, BatchJobService_QueryBizList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) QueryJobInfo(ctx context.Context, in *QueryJobInfoReq, opts ...grpc.CallOption) (*QueryJobInfoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryJobInfoRsp)
	err := c.cc.Invoke(ctx, BatchJobService_QueryJobInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) QueryJobList(ctx context.Context, in *QueryJobListReq, opts ...grpc.CallOption) (*QueryJobListRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryJobListRsp)
	err := c.cc.Invoke(ctx, BatchJobService_QueryJobList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) QueryJobStateInfo(ctx context.Context, in *QueryJobStateInfoReq, opts ...grpc.CallOption) (*QueryJobStateInfoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryJobStateInfoRsp)
	err := c.cc.Invoke(ctx, BatchJobService_QueryJobStateInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) QueryJobDataLog(ctx context.Context, in *QueryJobDataLogReq, opts ...grpc.CallOption) (*QueryJobDataLogRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryJobDataLogRsp)
	err := c.cc.Invoke(ctx, BatchJobService_QueryJobDataLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) BizStartJob(ctx context.Context, in *BizStartJobReq, opts ...grpc.CallOption) (*BizStartJobRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizStartJobRsp)
	err := c.cc.Invoke(ctx, BatchJobService_BizStartJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) BizStopJob(ctx context.Context, in *BizStopJobReq, opts ...grpc.CallOption) (*BizStopJobRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizStopJobRsp)
	err := c.cc.Invoke(ctx, BatchJobService_BizStopJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) BizUpdateJobData(ctx context.Context, in *BizUpdateJobDataReq, opts ...grpc.CallOption) (*BizUpdateJobDataRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizUpdateJobDataRsp)
	err := c.cc.Invoke(ctx, BatchJobService_BizUpdateJobData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchJobServiceClient) BizAddDataLog(ctx context.Context, in *BizAddDataLogReq, opts ...grpc.CallOption) (*BizAddDataLogRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizAddDataLogRsp)
	err := c.cc.Invoke(ctx, BatchJobService_BizAddDataLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchJobServiceServer is the server API for BatchJobService service.
// All implementations must embed UnimplementedBatchJobServiceServer
// for forward compatibility.
//
// 批量任务服务
type BatchJobServiceServer interface {
	// 业务注册
	AdminRegistryBiz(context.Context, *AdminRegistryBizReq) (*AdminRegistryBizRsp, error)
	// 修改业务
	AdminChangeBiz(context.Context, *AdminChangeBizReq) (*AdminChangeBizRsp, error)
	// 创建任务
	AdminCreateJob(context.Context, *AdminCreateJobReq) (*AdminCreateJobRsp, error)
	// 修改任务
	AdminChangeJob(context.Context, *AdminChangeJobReq) (*AdminChangeJobRsp, error)
	// 启动任务
	AdminStartJob(context.Context, *AdminStartJobReq) (*AdminStartJobRsp, error)
	// 停止任务
	AdminStopJob(context.Context, *AdminStopJobReq) (*AdminStopJobRsp, error)
	// 查询所有业务名
	QueryAllBizName(context.Context, *QueryAllBizNameReq) (*QueryAllBizNameRsp, error)
	// 查询业务信息
	QueryBizInfo(context.Context, *QueryBizInfoReq) (*QueryBizInfoRsp, error)
	// 查询业务列表
	QueryBizList(context.Context, *QueryBizListReq) (*QueryBizListRsp, error)
	// 查询任务基本信息
	QueryJobInfo(context.Context, *QueryJobInfoReq) (*QueryJobInfoRsp, error)
	// 查询任务列表
	QueryJobList(context.Context, *QueryJobListReq) (*QueryJobListRsp, error)
	// 查询任务状态信息, 用于获取运行中的任务的变化数据
	QueryJobStateInfo(context.Context, *QueryJobStateInfoReq) (*QueryJobStateInfoRsp, error)
	// 查询任务的数据日志
	QueryJobDataLog(context.Context, *QueryJobDataLogReq) (*QueryJobDataLogRsp, error)
	// 业务启动. 要求任务必须处于 JobStatus.WaitBizRun 状态
	BizStartJob(context.Context, *BizStartJobReq) (*BizStartJobRsp, error)
	// 要求业务停止运行. 一般为业务判断任务无法继续的时候
	BizStopJob(context.Context, *BizStopJobReq) (*BizStopJobRsp, error)
	// 更新任务数据. 要求任务必须处于 JobStatus.WaitBizRun 状态可以使用
	BizUpdateJobData(context.Context, *BizUpdateJobDataReq) (*BizUpdateJobDataRsp, error)
	// 增加数据日志
	BizAddDataLog(context.Context, *BizAddDataLogReq) (*BizAddDataLogRsp, error)
	mustEmbedUnimplementedBatchJobServiceServer()
}

// UnimplementedBatchJobServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBatchJobServiceServer struct{}

func (UnimplementedBatchJobServiceServer) AdminRegistryBiz(context.Context, *AdminRegistryBizReq) (*AdminRegistryBizRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRegistryBiz not implemented")
}
func (UnimplementedBatchJobServiceServer) AdminChangeBiz(context.Context, *AdminChangeBizReq) (*AdminChangeBizRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChangeBiz not implemented")
}
func (UnimplementedBatchJobServiceServer) AdminCreateJob(context.Context, *AdminCreateJobReq) (*AdminCreateJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateJob not implemented")
}
func (UnimplementedBatchJobServiceServer) AdminChangeJob(context.Context, *AdminChangeJobReq) (*AdminChangeJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChangeJob not implemented")
}
func (UnimplementedBatchJobServiceServer) AdminStartJob(context.Context, *AdminStartJobReq) (*AdminStartJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminStartJob not implemented")
}
func (UnimplementedBatchJobServiceServer) AdminStopJob(context.Context, *AdminStopJobReq) (*AdminStopJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminStopJob not implemented")
}
func (UnimplementedBatchJobServiceServer) QueryAllBizName(context.Context, *QueryAllBizNameReq) (*QueryAllBizNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllBizName not implemented")
}
func (UnimplementedBatchJobServiceServer) QueryBizInfo(context.Context, *QueryBizInfoReq) (*QueryBizInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBizInfo not implemented")
}
func (UnimplementedBatchJobServiceServer) QueryBizList(context.Context, *QueryBizListReq) (*QueryBizListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBizList not implemented")
}
func (UnimplementedBatchJobServiceServer) QueryJobInfo(context.Context, *QueryJobInfoReq) (*QueryJobInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobInfo not implemented")
}
func (UnimplementedBatchJobServiceServer) QueryJobList(context.Context, *QueryJobListReq) (*QueryJobListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobList not implemented")
}
func (UnimplementedBatchJobServiceServer) QueryJobStateInfo(context.Context, *QueryJobStateInfoReq) (*QueryJobStateInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobStateInfo not implemented")
}
func (UnimplementedBatchJobServiceServer) QueryJobDataLog(context.Context, *QueryJobDataLogReq) (*QueryJobDataLogRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobDataLog not implemented")
}
func (UnimplementedBatchJobServiceServer) BizStartJob(context.Context, *BizStartJobReq) (*BizStartJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizStartJob not implemented")
}
func (UnimplementedBatchJobServiceServer) BizStopJob(context.Context, *BizStopJobReq) (*BizStopJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizStopJob not implemented")
}
func (UnimplementedBatchJobServiceServer) BizUpdateJobData(context.Context, *BizUpdateJobDataReq) (*BizUpdateJobDataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizUpdateJobData not implemented")
}
func (UnimplementedBatchJobServiceServer) BizAddDataLog(context.Context, *BizAddDataLogReq) (*BizAddDataLogRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizAddDataLog not implemented")
}
func (UnimplementedBatchJobServiceServer) mustEmbedUnimplementedBatchJobServiceServer() {}
func (UnimplementedBatchJobServiceServer) testEmbeddedByValue()                         {}

// UnsafeBatchJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchJobServiceServer will
// result in compilation errors.
type UnsafeBatchJobServiceServer interface {
	mustEmbedUnimplementedBatchJobServiceServer()
}

func RegisterBatchJobServiceServer(s grpc.ServiceRegistrar, srv BatchJobServiceServer) {
	// If the following call pancis, it indicates UnimplementedBatchJobServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BatchJobService_ServiceDesc, srv)
}

func _BatchJobService_AdminRegistryBiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRegistryBizReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).AdminRegistryBiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_AdminRegistryBiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).AdminRegistryBiz(ctx, req.(*AdminRegistryBizReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_AdminChangeBiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChangeBizReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).AdminChangeBiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_AdminChangeBiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).AdminChangeBiz(ctx, req.(*AdminChangeBizReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_AdminCreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).AdminCreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_AdminCreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).AdminCreateJob(ctx, req.(*AdminCreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_AdminChangeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChangeJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).AdminChangeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_AdminChangeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).AdminChangeJob(ctx, req.(*AdminChangeJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_AdminStartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStartJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).AdminStartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_AdminStartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).AdminStartJob(ctx, req.(*AdminStartJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_AdminStopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminStopJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).AdminStopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_AdminStopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).AdminStopJob(ctx, req.(*AdminStopJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_QueryAllBizName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBizNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).QueryAllBizName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_QueryAllBizName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).QueryAllBizName(ctx, req.(*QueryAllBizNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_QueryBizInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBizInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).QueryBizInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_QueryBizInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).QueryBizInfo(ctx, req.(*QueryBizInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_QueryBizList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBizListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).QueryBizList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_QueryBizList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).QueryBizList(ctx, req.(*QueryBizListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_QueryJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).QueryJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_QueryJobInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).QueryJobInfo(ctx, req.(*QueryJobInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_QueryJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).QueryJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_QueryJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).QueryJobList(ctx, req.(*QueryJobListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_QueryJobStateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobStateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).QueryJobStateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_QueryJobStateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).QueryJobStateInfo(ctx, req.(*QueryJobStateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_QueryJobDataLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobDataLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).QueryJobDataLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_QueryJobDataLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).QueryJobDataLog(ctx, req.(*QueryJobDataLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_BizStartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizStartJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).BizStartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_BizStartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).BizStartJob(ctx, req.(*BizStartJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_BizStopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizStopJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).BizStopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_BizStopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).BizStopJob(ctx, req.(*BizStopJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_BizUpdateJobData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizUpdateJobDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).BizUpdateJobData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_BizUpdateJobData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).BizUpdateJobData(ctx, req.(*BizUpdateJobDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchJobService_BizAddDataLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizAddDataLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchJobServiceServer).BizAddDataLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatchJobService_BizAddDataLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchJobServiceServer).BizAddDataLog(ctx, req.(*BizAddDataLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchJobService_ServiceDesc is the grpc.ServiceDesc for BatchJobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchJobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batch_job.BatchJobService",
	HandlerType: (*BatchJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminRegistryBiz",
			Handler:    _BatchJobService_AdminRegistryBiz_Handler,
		},
		{
			MethodName: "AdminChangeBiz",
			Handler:    _BatchJobService_AdminChangeBiz_Handler,
		},
		{
			MethodName: "AdminCreateJob",
			Handler:    _BatchJobService_AdminCreateJob_Handler,
		},
		{
			MethodName: "AdminChangeJob",
			Handler:    _BatchJobService_AdminChangeJob_Handler,
		},
		{
			MethodName: "AdminStartJob",
			Handler:    _BatchJobService_AdminStartJob_Handler,
		},
		{
			MethodName: "AdminStopJob",
			Handler:    _BatchJobService_AdminStopJob_Handler,
		},
		{
			MethodName: "QueryAllBizName",
			Handler:    _BatchJobService_QueryAllBizName_Handler,
		},
		{
			MethodName: "QueryBizInfo",
			Handler:    _BatchJobService_QueryBizInfo_Handler,
		},
		{
			MethodName: "QueryBizList",
			Handler:    _BatchJobService_QueryBizList_Handler,
		},
		{
			MethodName: "QueryJobInfo",
			Handler:    _BatchJobService_QueryJobInfo_Handler,
		},
		{
			MethodName: "QueryJobList",
			Handler:    _BatchJobService_QueryJobList_Handler,
		},
		{
			MethodName: "QueryJobStateInfo",
			Handler:    _BatchJobService_QueryJobStateInfo_Handler,
		},
		{
			MethodName: "QueryJobDataLog",
			Handler:    _BatchJobService_QueryJobDataLog_Handler,
		},
		{
			MethodName: "BizStartJob",
			Handler:    _BatchJobService_BizStartJob_Handler,
		},
		{
			MethodName: "BizStopJob",
			Handler:    _BatchJobService_BizStopJob_Handler,
		},
		{
			MethodName: "BizUpdateJobData",
			Handler:    _BatchJobService_BizUpdateJobData_Handler,
		},
		{
			MethodName: "BizAddDataLog",
			Handler:    _BatchJobService_BizAddDataLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batch_job.proto",
}
